buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
	}
}


allprojects {
	apply plugin: 'java'
	apply plugin: 'forge'
	apply plugin: 'maven'
	group = project.group_name
	version = project.mod_version
	archivesBaseName = "[${project.minecraft_version}]${project.mod_id}"

	minecraft {
		version = project.minecraft_version + "-" + project.forge_version
		if (file('../run').exists()) {
			runDir = "../run"
		} else {
			runDir = ""
		}
	}
}

dependencies {
	// you may put jars on which you depend on in ./libs
	// or you may define them like so..
	//compile "some.group:artifact:version:classifier"
	//compile "some.group:artifact:version"

	// real examples
	//compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	//compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// for more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html

}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
			exclude '**/main/resources/'
		}
		resources {
			srcDirs = ['src/main/resources']
			exclude '**/java'
		}
	}
}

def commonManifest = {
    attributes 'FMLCorePlugin': 'mmmlibx.lib.multiModel.MMMLoader.MMMCoremod'
    attributes 'FMLCorePluginContainsFMLMod': 'littleMaidMobX.LMM_LittleMaidMobX mmmlibx.lib.MMMLib'
}


jar {
	classifier = project.hasProperty('extra_classifier') ? project.extra_classifier : 'universal'
	manifest commonManifest
}

task devJar(dependsOn: 'classes', type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
	manifest commonManifest
}

task sourceJar(dependsOn: 'classes', type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
	manifest commonManifest
}

processResources {
	//First we just copy in the mcmod.info file
	from(sourceSets.main.resources.srcDirs) {
		include '**/*.info'
		include '**/*.prop'

		// replaces
		expand([
			'mod_version': version,
			'minecraft_version': project.minecraft_version, ])
	}
	// copy everything else, thats we didnt do before
	from(sourceSets.main.resources.srcDirs) {
		exclude '**/*.info'
		exclude '**/*.prop'
	}
}
