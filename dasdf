diff --git a/src/main/java/littleMaidMobX/model/maids/MultiModel_NM.java b/src/main/java/littleMaidMobX/model/maids/MultiModel_NM.java
index 9aad01c..b9f6370 100755
--- a/src/main/java/littleMaidMobX/model/maids/MultiModel_NM.java
+++ b/src/main/java/littleMaidMobX/model/maids/MultiModel_NM.java
@@ -1 +1 @@
-package littleMaidMobX.model.maids;import littleMaidMobX.Helper;import littleMaidMobX.entity.EntityLittleMaid;import littleMaidMobX.model.caps.IModelCaps;import littleMaidMobX.model.caps.ModelCapsHelper;import littleMaidMobX.model.modchu.ModelModchuBaseSR2;import littleMaidMobX.render.model.ModelRenderer;public class MultiModel_NM extends ModelModchuBaseSR2 {	public ModelRenderer hairR;	public ModelRenderer hairL;	public ModelRenderer Cachusya;	public ModelRenderer Zukin;	public ModelRenderer Ribon1R;	public ModelRenderer Ribon1L;	public ModelRenderer Ribon2R;	public ModelRenderer Ribon2L;	public ModelRenderer Bribonc;	public ModelRenderer Bribon1R;	public ModelRenderer Bribon1L;	public ModelRenderer Bribon2R;	public ModelRenderer Bribon2L;	public ModelRenderer Breast1;	public ModelRenderer Cheek_R;	public ModelRenderer Cheek_L;	public ModelRenderer SideTail1R;	public ModelRenderer SideTail1L;	public ModelRenderer sensor;	public ModelRenderer RightArm1;	public ModelRenderer RightArm2;	public ModelRenderer RightArm3;	public ModelRenderer LeftArm1;	public ModelRenderer LeftArm2;	public ModelRenderer LeftArm3;	public ModelRenderer tie;	public ModelRenderer bow;	public ModelRenderer BodyA;	public ModelRenderer BreastA;	public ModelRenderer RightLeg;	public ModelRenderer LeftLeg;	public MultiModel_NM() {		this(0.0F);	}	public MultiModel_NM(float f) {		this(f, 0.0F);	}	public MultiModel_NM(float f, float f1) {		this(f, f1, 64, 64);	}	public MultiModel_NM(float f, float f1, int i, int j) {		super(f, f1, i < 0 ? 64 : i, j < 0 ? 64 : j);	}	@Override	public void initModel(float f, float f1, boolean isAfterInit) {		textureWidth = 64;		textureHeight = 64;		f1 += 8F;		bipedHead = new ModelRenderer(this, 0, 0);		bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f);		bipedHead.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedHeadwear = new ModelRenderer(this, 24, 0);		bipedHeadwear.addBox(-4.0F, 0.0F, 1.0F, 8, 5, 3, f);		bipedHeadwear.setRotationPoint(0.0F, 0.0F, 0.0F);		Zukin = new ModelRenderer(this, 0, 32);		Zukin.addBox(-4F, -8.1F, -4F, 8, 8, 9, f + 0.1F);		Zukin.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedBody = new ModelRenderer(this, 32, 8);		bipedBody.addBox(-3.0F, -3.5F, -2.0F, 6, 7, 4, f);		bipedBody.setRotationPoint(0.0F, -3.0F, 0.0F);		tie = new ModelRenderer(this, 0, 6);		tie.addBox(0.0F, 0.0F, 0.0F, 1, 1, 1, f + 0.1F);		tie.setRotationPoint(-0.5F, -3.5F, -2.1F);		bow = new ModelRenderer(this, 40, 42);		bow.addBox(2.0F, -2F, 2.0F, 2, 6, 2, f);		bow.setRotationPoint(0.0F, 0.0F, 0.0F);		bow.setRotateAngleZ(0.837758F);		bipedRightArm = new ModelRenderer(this, 48, 0);		bipedRightArm.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, f);		bipedRightArm.setRotationPoint(-3.0F, 4.5F, 0.0F);		RightArm1 = new ModelRenderer(this, 48, 42);		RightArm1.addBox(1.0F, 3F, -1F, 2, 1, 2, f + 0.4F);		RightArm1.setRotationPoint(-2.0F, 1.0F, 0.0F);		RightArm2 = new ModelRenderer(this, 48, 45);		RightArm2.addBox(1.0F, 4F, -1F, 2, 3, 2, f + 0.2F);		RightArm2.setRotationPoint(-2.0F, 1.0F, 0.0F);		RightArm3 = new ModelRenderer(this, 48, 50);		RightArm3.addBox(1.0F, 3F, -1F, 2, 4, 2, f + 0.2F);		RightArm3.setRotationPoint(-2.0F, 1.0F, 0.0F);		bipedLeftArm = new ModelRenderer(this, 56, 0);		bipedLeftArm.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, f);		bipedLeftArm.setRotationPoint(3.0F, 4.5F, 0.0F);		LeftArm1 = new ModelRenderer(this, 56, 42);		LeftArm1.addBox(-3F, 4F, -1F, 2, 1, 2, f + 0.4F);		LeftArm1.setRotationPoint(2.0F, 1.0F, 0.0F);		LeftArm2 = new ModelRenderer(this, 56, 45);		LeftArm2.addBox(-3F, 4F, -1F, 2, 3, 2, f + 0.2F);		LeftArm2.setRotationPoint(2.0F, 1.0F, 0.0F);		LeftArm3 = new ModelRenderer(this, 56, 50);		LeftArm3.addBox(-3F, 3F, -1F, 2, 4, 2, f + 0.2F);		LeftArm3.setRotationPoint(2.0F, 1.0F, 0.0F);		bipedRightLeg = new ModelRenderer(this, 32, 19);		bipedRightLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 9, 4, f);		bipedRightLeg.setRotationPoint(-1.5F, 15F, 0.0F);		bipedLeftLeg = new ModelRenderer(this, 32, 19);		bipedLeftLeg.mirror = true;		bipedLeftLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 9, 4, f);		bipedLeftLeg.setRotationPoint(1.5F, 15F, 0.0F);		Skirt = new ModelRenderer(this, 0, 16, "Skirt");		Skirt.addBox(-4F, -4F, -4F, 8, 8, 8, f);		Skirt.setRotationPoint(0.0F, 4.0F, 0.0F);		ChignonR = new ModelRenderer(this, 25, 32);		ChignonR.addBox(-5F, -7F, -0.5F, 1, 3, 3, f);		ChignonR.setRotationPoint(0.0F, 0.0F, 0.0F);		ChignonL = new ModelRenderer(this, 25, 32);		ChignonL.addBox(4F, -7F, -0.5F, 1, 3, 3, f);		ChignonL.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTailR = new ModelRenderer(this, 52, 10);		SideTailR.addBox(-5.6F, -6.8F, 0.0F, 1, 7, 2, f);		SideTailR.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTailR.setRotateAngleZ(0.0872665F);		SideTailL = new ModelRenderer(this, 58, 10);		SideTailL.mirror = true;		SideTailL.addBox(4.6F, -6.8F, 0.0F, 1, 7, 2, f);		SideTailL.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTailL.setRotateAngleZ(0.0872665F);		SideTail1R = new ModelRenderer(this, 34, 32);		SideTail1R.addBox(-8F, -7F, 0.0F, 3, 7, 2, f);		SideTail1R.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTail1R.setRotateAngleZ(0.122173F);		SideTail1L = new ModelRenderer(this, 44, 32);		SideTail1L.addBox(5F, -7F, 0.0F, 3, 7, 2, f);		SideTail1L.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTail1L.setRotateAngleZ(-0.122173F);		hairR = new ModelRenderer(this, 52, 19);		hairR.addBox(-4F, 0.0F, -4F, 1, 3, 2, f);		hairR.setRotationPoint(0.0F, 0.0F, 0.0F);		hairL = new ModelRenderer(this, 58, 19);		hairL.addBox(3F, 0.0F, -4F, 1, 3, 2, f);		hairL.setRotationPoint(0.0F, 0.0F, 0.0F);		Cachusya = new ModelRenderer(this, 24, 23);		Cachusya.addPlate(-2F, -9F, -4F, 4, 1, 0, f);		Cachusya.setRotationPoint(0.0F, 0.0F, 0.0F);		Ribon1R = new ModelRenderer(this, 52, 24);		Ribon1R.addPlate(0.0F, -6F, -4.7F, 3, 6, 0, f);		Ribon1R.setRotationPoint(0.0F, 0.0F, 0.0F);		Ribon1R.setRotateAngleX(-0.0872665F);		Ribon1R.setRotateAngleY(((float) Math.PI / 2F));		Ribon1L = new ModelRenderer(this, 58, 24);		Ribon1L.addPlate(-3F, -6F, -4.7F, 3, 6, 0, f);		Ribon1L.setRotationPoint(0.0F, 0.0F, 0.0F);		Ribon1L.setRotateAngleX(-0.0872665F);		Ribon1L.setRotateAngleY(-((float) Math.PI / 2F));		Bribonc = new ModelRenderer(this, 0, 20);		Bribonc.addBox(-1F, 4.6F, 3F, 2, 2, 2, f);		Bribonc.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon1R = new ModelRenderer(this, 24, 19);		Bribon1R.addPlate(-4F, 4.6F, 4.7F, 3, 3, 0, f);		Bribon1R.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon1L = new ModelRenderer(this, 24, 16);		Bribon1L.addPlate(1.0F, 4.6F, 4.7F, 3, 3, 0, f);		Bribon1L.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon2R = new ModelRenderer(this, 46, 24);		Bribon2R.addPlate(-4F, 5.6F, 4.3F, 3, 5, 0, f);		Bribon2R.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon2L = new ModelRenderer(this, 46, 19);		Bribon2L.addPlate(1.0F, 5.6F, 4.3F, 3, 5, 0, f);		Bribon2L.setRotationPoint(0.0F, 0.0F, 0.0F);		Breast1 = new ModelRenderer(this, 0, 32);		Breast1.addBox(0.0F, -2.5F, 0.0F, 2, 5, 1, f);		Breast1.setRotationPoint(0.0F, -3.0F, -2F);		Breast1.setRotateAngleZ(((float) Math.PI / 2F));		Breast1.setRotateAngleY(0.4363323F);		eyeR = new ModelRenderer(this, 0, 16);		eyeR.addPlate(-4.0F, -5.0F, -4.001F, 4, 4, 0, f);		eyeR.setRotationPoint(0.0F, 0.0F, 0.0F);		eyeL = new ModelRenderer(this, 4, 16);		eyeL.addPlate(0.0F, -5.0F, -4.001F, 4, 4, 0, f);		eyeL.setRotationPoint(0.0F, 0.0F, 0.0F);		Cheek_R = new ModelRenderer(this, 32, 8);		Cheek_R.addPlate(-4.5F, -4.5F, -4.002F, 4, 4, 0, f);		Cheek_R.setRotationPoint(0.0F, 1.0F, 0.0F);		Cheek_L = new ModelRenderer(this, 32, 19);		Cheek_L.addPlate(0.5F, -4.5F, -4.002F, 4, 4, 0, f);		Cheek_L.setRotationPoint(0.0F, 1.0F, 0.0F);		sensor = new ModelRenderer(this, 0, 49);		sensor.addPlate(0.0F, -4F, -10F, 10, 4, 1);		sensor.setRotationPoint(0.0F, -8.0F, 0.0F);		BodyA = new ModelRenderer(this, 0, 53);		BodyA.addBox(-3F, 0.0F, -2F, 6, 7, 4, f + 0.1F);		BodyA.setRotationPoint(0.0F, 0.0F, 0.0F);		BreastA = new ModelRenderer(this, 34, 42);		BreastA.addBox(0.0F, -2.5F, 0.0F, 2, 5, 1, f + 0.1F);		BreastA.setRotationPoint(0.0F, 1.0F, -2F);		BreastA.setRotateAngleZ(((float) Math.PI / 2F));		BreastA.setRotateAngleY(0.4363323F);		RightLeg = new ModelRenderer(this, 20, 49);		RightLeg.addBox(-1F, 1.0F, -2F, 3, 8, 4, f + 0.1F);		RightLeg.setRotationPoint(-1F, 0.0F, 0.0F);		LeftLeg = new ModelRenderer(this, 20, 49);		LeftLeg.mirror = true;		LeftLeg.addBox(-2F, 1.0F, -2F, 3, 8, 4, f + 0.1F);		LeftLeg.setRotationPoint(1.0F, 0.0F, 0.0F);		mainFrame = new ModelRenderer(this, 0, 0);		mainFrame.setRotationPoint(0F, 0F + f1, 0F);		if (isAfterInit) afterInit(f, f1);	}	@Override	public void skirtFloatsInit(float f, float f1) {		if (ModelCapsHelper.getCapsValueInt(this, null, caps_skirtFloats) < 2) return;		textureWidth = 64;		textureHeight = 64;		super.skirtFloatsInit(f, f1);	}	@Override	public void defaultAddChildSetting() {		super.defaultAddChildSetting();		bipedHead.addChild(Ribon1R);		bipedHead.addChild(Ribon1L);		bipedHead.addChild(Cachusya);		bipedHead.addChild(SideTail1R);		bipedHead.addChild(SideTail1L);		bipedHead.addChild(Zukin);		bipedHead.addChild(hairR);		bipedHead.addChild(hairL);		bipedHead.addChild(eyeR);		bipedHead.addChild(eyeL);		bipedHead.addChild(Cheek_R);		bipedHead.addChild(Cheek_L);		bipedHead.addChild(sensor);		bipedBody.addChild(Bribonc);		bipedBody.addChild(Bribon1R);		bipedBody.addChild(Bribon1L);		bipedBody.addChild(Bribon2R);		bipedBody.addChild(Bribon2L);		bipedBody.addChild(tie);		bipedBody.addChild(bow);		bipedBody.addChild(BodyA);		bipedBody.addChild(BreastA);		bipedBody.addChild(Breast1);		bipedRightArm.addChild(RightArm1);		bipedRightArm.addChild(RightArm2);		bipedRightArm.addChild(RightArm3);		bipedLeftArm.addChild(LeftArm1);		bipedLeftArm.addChild(LeftArm2);		bipedLeftArm.addChild(LeftArm3);		bipedLeftLeg.addChild(LeftLeg);		bipedRightLeg.addChild(RightLeg);	}	@Override	public void setDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {		super.setDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		Breast1.setRotationPoint(0.0F, -3.0F, -2F);		BreastA.setRotationPoint(0.0F, 1.0F, -2F);	}	@Override	public void setLivingAnimationsLM(IModelCaps entityCaps, float f, float f1, float f2) {		super.setLivingAnimationsLM(entityCaps, f, f1, f2);		Object entityliving = entityCaps.getCapsValue(caps_Entity);		if (entityliving != null); else return;		int ticksExisted = Helper.getEntityTicksExisted(entityliving);		float f3 = (float)ticksExisted + f2 + ModelCapsHelper.getCapsValueFloat(this, entityCaps, caps_entityIdFactor);		if (!ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow)) {			boolean isWorkingDelay = ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_isWorkingDelay);			if (isWorkingDelay) {								int maidMode = 0;				if (entityliving instanceof EntityLittleMaid) {					maidMode = ((EntityLittleMaid)entityliving).getMaidModeInt();				}				int i = 0x0080;				int i1 = 0x0021;				int i2 = 0x0083;								RightArm1.setVisible(false);				LeftArm1.setVisible(false);				RightArm2.setVisible(false);				LeftArm2.setVisible(false);				RightArm3.setVisible(false);				LeftArm3.setVisible(false);				Zukin.setVisible(false);				sensor.setVisible(true);				Cachusya.setVisible(true);				RightLeg.setVisible(false);				LeftLeg.setVisible(false);				BodyA.setVisible(false);				BreastA.setVisible(false);				bow.setVisible(false);				if (maidMode == i) {					f3 *= 8F;					//float f4 = -0.2F;					RightArm1.setVisible(true);					LeftArm1.setVisible(true);					RightArm2.setVisible(false);					LeftArm2.setVisible(false);					RightArm3.setVisible(true);					LeftArm3.setVisible(true);					BodyA.setVisible(true);					RightLeg.setVisible(true);					LeftLeg.setVisible(true);				}				if (maidMode == i1) {					f3 *= 8F;					float f5 = -0.2F;					RightArm2.setVisible(true);					LeftArm2.setVisible(true);					RightArm3.setVisible(false);					LeftArm3.setVisible(false);					Zukin.setVisible(true);					sensor.setVisible(false);					Cachusya.setVisible(false);				}				if (maidMode == i2) {					f3 *= 8F;					float f6 = -0.2F;					RightArm2.setVisible(false);					LeftArm2.setVisible(false);					RightArm3.setVisible(true);					LeftArm3.setVisible(true);					BodyA.setVisible(true);					bow.setVisible(true);					RightLeg.setVisible(true);					LeftLeg.setVisible(true);					BreastA.setVisible(true);				}			}		}		float f7 = 0.0F;		if (ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_isLookSuger)) {			f3 *= 8F;			f7 = -0.2F;			Cheek_R.setVisible(true);			Cheek_L.setVisible(true);		} else {			f7 = (1.0F - ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_health) / 20F) * 0.5F;			Cheek_R.setVisible(false);			Cheek_L.setVisible(false);		}		//float f8 = mh_sin(f3 * 0.067F) * 0.05F - f7;		//float f9 = ((float)Math.PI * 2F / 9F);		sensor.setRotateAngle(mh_sin(f3 * 0.067F) * 0.05F + f7, mh_cos(f3 * 0.09F) * 0.5F, mh_sin(f3 * 0.09F) * 0.2F);	}}
+package littleMaidMobX.model.maids;import littleMaidMobX.Helper;import littleMaidMobX.entity.EntityLittleMaid;import littleMaidMobX.model.caps.IModelCaps;import littleMaidMobX.model.caps.ModelCapsHelper;import littleMaidMobX.model.modchu.ModelModchuBaseSR2;import littleMaidMobX.render.model.ModelRenderer;public class MultiModel_NM extends ModelModchuBaseSR2 {	public ModelRenderer hairR;	public ModelRenderer hairL;	public ModelRenderer Cachusya;	public ModelRenderer Zukin;	public ModelRenderer Ribon1R;	public ModelRenderer Ribon1L;	public ModelRenderer Ribon2R;	public ModelRenderer Ribon2L;	public ModelRenderer Bribonc;	public ModelRenderer Bribon1R;	public ModelRenderer Bribon1L;	public ModelRenderer Bribon2R;	public ModelRenderer Bribon2L;	public ModelRenderer Breast1;	public ModelRenderer Cheek_R;	public ModelRenderer Cheek_L;	public ModelRenderer SideTail1R;	public ModelRenderer SideTail1L;	public ModelRenderer sensor;	public ModelRenderer RightArm1;	public ModelRenderer RightArm2;	public ModelRenderer RightArm3;	public ModelRenderer LeftArm1;	public ModelRenderer LeftArm2;	public ModelRenderer LeftArm3;	public ModelRenderer tie;	public ModelRenderer bow;	public ModelRenderer BodyA;	public ModelRenderer BreastA;	public ModelRenderer RightLeg;	public ModelRenderer LeftLeg;	public MultiModel_NM() {		this(0.0F);	}	public MultiModel_NM(float f) {		this(f, 0.0F);	}	public MultiModel_NM(float f, float f1) {		this(f, f1, 64, 64);	}	public MultiModel_NM(float f, float f1, int i, int j) {		super(f, f1, i < 0 ? 64 : i, j < 0 ? 64 : j);	}	@Override	public void initModel(float f, float f1, boolean isAfterInit) {		textureWidth = 64;		textureHeight = 64;		f1 += 8F;		bipedHead = new ModelRenderer(this, 0, 0, "bipedHead");		bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f);		bipedHead.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedHeadwear = new ModelRenderer(this, 24, 0, "bipedHeadwear");		bipedHeadwear.addBox(-4.0F, 0.0F, 1.0F, 8, 5, 3, f);		bipedHeadwear.setRotationPoint(0.0F, 0.0F, 0.0F);		Zukin = new ModelRenderer(this, 0, 32, "Zukin");		Zukin.addBox(-4F, -8.1F, -4F, 8, 8, 9, f + 0.1F);		Zukin.setRotationPoint(0.0F, 0.0F, 0.0F);		bipedBody = new ModelRenderer(this, 32, 8, "bipedBody");		bipedBody.addBox(-3.0F, -3.5F, -2.0F, 6, 7, 4, f);		bipedBody.setRotationPoint(0.0F, -3.0F, 0.0F);		tie = new ModelRenderer(this, 0, 6, "tie");		tie.addBox(0.0F, 0.0F, 0.0F, 1, 1, 1, f + 0.1F);		tie.setRotationPoint(-0.5F, -3.5F, -2.1F);		bow = new ModelRenderer(this, 40, 42, "bow");		bow.addBox(2.0F, -2F, 2.0F, 2, 6, 2, f);		bow.setRotationPoint(0.0F, 0.0F, 0.0F);		bow.setRotateAngleZ(0.837758F);		bipedRightArm = new ModelRenderer(this, 48, 0, "bipedRightArm");		bipedRightArm.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, f);		bipedRightArm.setRotationPoint(-3.0F, 4.5F, 0.0F);		RightArm1 = new ModelRenderer(this, 48, 42, "RightArm1");		RightArm1.addBox(1.0F, 3F, -1F, 2, 1, 2, f + 0.4F);		RightArm1.setRotationPoint(-2.0F, 1.0F, 0.0F);		RightArm2 = new ModelRenderer(this, 48, 45, "RightArm2");		RightArm2.addBox(1.0F, 4F, -1F, 2, 3, 2, f + 0.2F);		RightArm2.setRotationPoint(-2.0F, 1.0F, 0.0F);		RightArm3 = new ModelRenderer(this, 48, 50, "RightArm3");		RightArm3.addBox(1.0F, 3F, -1F, 2, 4, 2, f + 0.2F);		RightArm3.setRotationPoint(-2.0F, 1.0F, 0.0F);		bipedLeftArm = new ModelRenderer(this, 56, 0, "bipedLeftArm");		bipedLeftArm.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, f);		bipedLeftArm.setRotationPoint(3.0F, 4.5F, 0.0F);		LeftArm1 = new ModelRenderer(this, 56, 42, "LeftArm1");		LeftArm1.addBox(-3F, 4F, -1F, 2, 1, 2, f + 0.4F);		LeftArm1.setRotationPoint(2.0F, 1.0F, 0.0F);		LeftArm2 = new ModelRenderer(this, 56, 45, "LeftArm2");		LeftArm2.addBox(-3F, 4F, -1F, 2, 3, 2, f + 0.2F);		LeftArm2.setRotationPoint(2.0F, 1.0F, 0.0F);		LeftArm3 = new ModelRenderer(this, 56, 50, "LeftArm3");		LeftArm3.addBox(-3F, 3F, -1F, 2, 4, 2, f + 0.2F);		LeftArm3.setRotationPoint(2.0F, 1.0F, 0.0F);		bipedRightLeg = new ModelRenderer(this, 32, 19, "bipedRightLeg");		bipedRightLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 9, 4, f);		bipedRightLeg.setRotationPoint(-1.5F, 15F, 0.0F);		bipedLeftLeg = new ModelRenderer(this, 32, 19, "bipedLeftLeg");		bipedLeftLeg.mirror = true;		bipedLeftLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 9, 4, f);		bipedLeftLeg.setRotationPoint(1.5F, 15F, 0.0F);		Skirt = new ModelRenderer(this, 0, 16, "Skirt");		Skirt.addBox(-4F, -4F, -4F, 8, 8, 8, f);		Skirt.setRotationPoint(0.0F, 4.0F, 0.0F);		ChignonR = new ModelRenderer(this, 25, 32, "ChignonR");		ChignonR.addBox(-5F, -7F, -0.5F, 1, 3, 3, f);		ChignonR.setRotationPoint(0.0F, 0.0F, 0.0F);		ChignonL = new ModelRenderer(this, 25, 32, "ChignonL");		ChignonL.addBox(4F, -7F, -0.5F, 1, 3, 3, f);		ChignonL.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTailR = new ModelRenderer(this, 52, 10, "SideTailR");		SideTailR.addBox(-5.6F, -6.8F, 0.0F, 1, 7, 2, f);		SideTailR.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTailR.setRotateAngleZ(0.0872665F);		SideTailL = new ModelRenderer(this, 58, 10, "SideTailL");		SideTailL.mirror = true;		SideTailL.addBox(4.6F, -6.8F, 0.0F, 1, 7, 2, f);		SideTailL.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTailL.setRotateAngleZ(0.0872665F);		SideTail1R = new ModelRenderer(this, 34, 32, "SideTail1R");		SideTail1R.addBox(-8F, -7F, 0.0F, 3, 7, 2, f);		SideTail1R.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTail1R.setRotateAngleZ(0.122173F);		SideTail1L = new ModelRenderer(this, 44, 32, "SideTail1L");		SideTail1L.addBox(5F, -7F, 0.0F, 3, 7, 2, f);		SideTail1L.setRotationPoint(0.0F, 0.0F, 0.0F);		SideTail1L.setRotateAngleZ(-0.122173F);		hairR = new ModelRenderer(this, 52, 19, "hairR");		hairR.addBox(-4F, 0.0F, -4F, 1, 3, 2, f);		hairR.setRotationPoint(0.0F, 0.0F, 0.0F);		hairL = new ModelRenderer(this, 58, 19, "hairL");		hairL.addBox(3F, 0.0F, -4F, 1, 3, 2, f);		hairL.setRotationPoint(0.0F, 0.0F, 0.0F);		Cachusya = new ModelRenderer(this, 24, 23, "Cachusya");		Cachusya.addPlate(-2F, -9F, -4F, 4, 1, 0, f);		Cachusya.setRotationPoint(0.0F, 0.0F, 0.0F);		Ribon1R = new ModelRenderer(this, 52, 24, "Ribon1R");		Ribon1R.addPlate(0.0F, -6F, -4.7F, 3, 6, 0, f);		Ribon1R.setRotationPoint(0.0F, 0.0F, 0.0F);		Ribon1R.setRotateAngleX(-0.0872665F);		Ribon1R.setRotateAngleY(((float) Math.PI / 2F));		Ribon1L = new ModelRenderer(this, 58, 24, "Ribon1L");		Ribon1L.addPlate(-3F, -6F, -4.7F, 3, 6, 0, f);		Ribon1L.setRotationPoint(0.0F, 0.0F, 0.0F);		Ribon1L.setRotateAngleX(-0.0872665F);		Ribon1L.setRotateAngleY(-((float) Math.PI / 2F));		Bribonc = new ModelRenderer(this, 0, 20, "Bribonc");		Bribonc.addBox(-1F, 4.6F, 3F, 2, 2, 2, f);		Bribonc.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon1R = new ModelRenderer(this, 24, 19, "Bribon1R");		Bribon1R.addPlate(-4F, 4.6F, 4.7F, 3, 3, 0, f);		Bribon1R.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon1L = new ModelRenderer(this, 24, 16, "Bribon1L");		Bribon1L.addPlate(1.0F, 4.6F, 4.7F, 3, 3, 0, f);		Bribon1L.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon2R = new ModelRenderer(this, 46, 24, "Bribon2R");		Bribon2R.addPlate(-4F, 5.6F, 4.3F, 3, 5, 0, f);		Bribon2R.setRotationPoint(0.0F, 0.0F, 0.0F);		Bribon2L = new ModelRenderer(this, 46, 19, "Bribon2L");		Bribon2L.addPlate(1.0F, 5.6F, 4.3F, 3, 5, 0, f);		Bribon2L.setRotationPoint(0.0F, 0.0F, 0.0F);		Breast1 = new ModelRenderer(this, 0, 32, "Breast1");		Breast1.addBox(0.0F, -2.5F, 0.0F, 2, 5, 1, f);		Breast1.setRotationPoint(0.0F, -3.0F, -2F);		Breast1.setRotateAngleZ(((float) Math.PI / 2F));		Breast1.setRotateAngleY(0.4363323F);		eyeR = new ModelRenderer(this, 0, 16, "eyeR");		eyeR.addPlate(-4.0F, -5.0F, -4.001F, 4, 4, 0, f);		eyeR.setRotationPoint(0.0F, 0.0F, 0.0F);		eyeL = new ModelRenderer(this, 4, 16, "eyeL");		eyeL.addPlate(0.0F, -5.0F, -4.001F, 4, 4, 0, f);		eyeL.setRotationPoint(0.0F, 0.0F, 0.0F);		Cheek_R = new ModelRenderer(this, 32, 8, "Cheek_R");		Cheek_R.addPlate(-4.5F, -4.5F, -4.002F, 4, 4, 0, f);		Cheek_R.setRotationPoint(0.0F, 1.0F, 0.0F);		Cheek_L = new ModelRenderer(this, 32, 19, "Cheek_L");		Cheek_L.addPlate(0.5F, -4.5F, -4.002F, 4, 4, 0, f);		Cheek_L.setRotationPoint(0.0F, 1.0F, 0.0F);		sensor = new ModelRenderer(this, 0, 49, "sensor");		sensor.addPlate(0.0F, -4F, -10F, 10, 4, 1);		sensor.setRotationPoint(0.0F, -8.0F, 0.0F);		BodyA = new ModelRenderer(this, 0, 53, "BodyA");		BodyA.addBox(-3F, 0.0F, -2F, 6, 7, 4, f + 0.1F);		BodyA.setRotationPoint(0.0F, 0.0F, 0.0F);		BreastA = new ModelRenderer(this, 34, 42, "BreastA");		BreastA.addBox(0.0F, -2.5F, 0.0F, 2, 5, 1, f + 0.1F);		BreastA.setRotationPoint(0.0F, 1.0F, -2F);		BreastA.setRotateAngleZ(((float) Math.PI / 2F));		BreastA.setRotateAngleY(0.4363323F);		RightLeg = new ModelRenderer(this, 20, 49, "RightLeg");		RightLeg.addBox(-1F, 1.0F, -2F, 3, 8, 4, f + 0.1F);		RightLeg.setRotationPoint(-1F, 0.0F, 0.0F);		LeftLeg = new ModelRenderer(this, 20, 49, "LeftLeg");		LeftLeg.mirror = true;		LeftLeg.addBox(-2F, 1.0F, -2F, 3, 8, 4, f + 0.1F);		LeftLeg.setRotationPoint(1.0F, 0.0F, 0.0F);		mainFrame = new ModelRenderer(this, 0, 0, "mainFrame");		mainFrame.setRotationPoint(0F, 0F + f1, 0F);		if (isAfterInit) afterInit(f, f1);	}	@Override	public void skirtFloatsInit(float f, float f1) {		if (ModelCapsHelper.getCapsValueInt(this, null, caps_skirtFloats) < 2) return;		textureWidth = 64;		textureHeight = 64;		super.skirtFloatsInit(f, f1);	}	@Override	public void defaultAddChildSetting() {		super.defaultAddChildSetting();		bipedHead.addChild(Ribon1R);		bipedHead.addChild(Ribon1L);		bipedHead.addChild(Cachusya);		bipedHead.addChild(SideTail1R);		bipedHead.addChild(SideTail1L);		bipedHead.addChild(Zukin);		bipedHead.addChild(hairR);		bipedHead.addChild(hairL);		bipedHead.addChild(eyeR);		bipedHead.addChild(eyeL);		bipedHead.addChild(Cheek_R);		bipedHead.addChild(Cheek_L);		bipedHead.addChild(sensor);		bipedBody.addChild(Bribonc);		bipedBody.addChild(Bribon1R);		bipedBody.addChild(Bribon1L);		bipedBody.addChild(Bribon2R);		bipedBody.addChild(Bribon2L);		bipedBody.addChild(tie);		bipedBody.addChild(bow);		bipedBody.addChild(BodyA);		bipedBody.addChild(BreastA);		bipedBody.addChild(Breast1);		bipedRightArm.addChild(RightArm1);		bipedRightArm.addChild(RightArm2);		bipedRightArm.addChild(RightArm3);		bipedLeftArm.addChild(LeftArm1);		bipedLeftArm.addChild(LeftArm2);		bipedLeftArm.addChild(LeftArm3);		bipedLeftLeg.addChild(LeftLeg);		bipedRightLeg.addChild(RightLeg);	}	@Override	public void setDefaultPause(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {		super.setDefaultPause(f, f1, f2, f3, f4, f5, entityCaps);		Breast1.setRotationPoint(0.0F, -3.0F, -2F);		BreastA.setRotationPoint(0.0F, 1.0F, -2F);	}	@Override	public void setLivingAnimationsLM(IModelCaps entityCaps, float f, float f1, float f2) {		super.setLivingAnimationsLM(entityCaps, f, f1, f2);		Object entityliving = entityCaps.getCapsValue(caps_Entity);		if (entityliving != null); else return;		int ticksExisted = Helper.getEntityTicksExisted(entityliving);		float f3 = (float)ticksExisted + f2 + ModelCapsHelper.getCapsValueFloat(this, entityCaps, caps_entityIdFactor);		if (!ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow)) {			boolean isWorkingDelay = ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_isWorkingDelay);			if (isWorkingDelay) {								int maidMode = 0;				if (entityliving instanceof EntityLittleMaid) {					maidMode = ((EntityLittleMaid)entityliving).getMaidModeInt();				}				int i = 0x0080;				int i1 = 0x0021;				int i2 = 0x0083;								RightArm1.setVisible(false);				LeftArm1.setVisible(false);				RightArm2.setVisible(false);				LeftArm2.setVisible(false);				RightArm3.setVisible(false);				LeftArm3.setVisible(false);				Zukin.setVisible(false);				sensor.setVisible(true);				Cachusya.setVisible(true);				RightLeg.setVisible(false);				LeftLeg.setVisible(false);				BodyA.setVisible(false);				BreastA.setVisible(false);				bow.setVisible(false);				if (maidMode == i) {					f3 *= 8F;					//float f4 = -0.2F;					RightArm1.setVisible(true);					LeftArm1.setVisible(true);					RightArm2.setVisible(false);					LeftArm2.setVisible(false);					RightArm3.setVisible(true);					LeftArm3.setVisible(true);					BodyA.setVisible(true);					RightLeg.setVisible(true);					LeftLeg.setVisible(true);				}				if (maidMode == i1) {					f3 *= 8F;					float f5 = -0.2F;					RightArm2.setVisible(true);					LeftArm2.setVisible(true);					RightArm3.setVisible(false);					LeftArm3.setVisible(false);					Zukin.setVisible(true);					sensor.setVisible(false);					Cachusya.setVisible(false);				}				if (maidMode == i2) {					f3 *= 8F;					float f6 = -0.2F;					RightArm2.setVisible(false);					LeftArm2.setVisible(false);					RightArm3.setVisible(true);					LeftArm3.setVisible(true);					BodyA.setVisible(true);					bow.setVisible(true);					RightLeg.setVisible(true);					LeftLeg.setVisible(true);					BreastA.setVisible(true);				}			}		}		float f7 = 0.0F;		if (ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_isLookSuger)) {			f3 *= 8F;			f7 = -0.2F;			Cheek_R.setVisible(true);			Cheek_L.setVisible(true);		} else {			f7 = (1.0F - ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_health) / 20F) * 0.5F;			Cheek_R.setVisible(false);			Cheek_L.setVisible(false);		}		//float f8 = mh_sin(f3 * 0.067F) * 0.05F - f7;		//float f9 = ((float)Math.PI * 2F / 9F);		sensor.setRotateAngle(mh_sin(f3 * 0.067F) * 0.05F + f7, mh_cos(f3 * 0.09F) * 0.5F, mh_sin(f3 * 0.09F) * 0.2F);	}}
diff --git a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseAction.java b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseAction.java
index 848a432..8e8a5e5 100755
--- a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseAction.java
+++ b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseAction.java
@@ -1 +1 @@
-package littleMaidMobX.model.modchu;import littleMaidMobX.model.caps.IModelCaps;import littleMaidMobX.render.model.ModelRenderer;public abstract class ModelModchuBaseAction extends ModelModchuBaseBiped {	public ModelRenderer rightArm;	public ModelRenderer rightArm2;	public ModelRenderer rightArmPlus;	public ModelRenderer rightArmPlus2;	public ModelRenderer rightHand;	public ModelRenderer rightLeg;	public ModelRenderer rightLeg2;	public ModelRenderer rightLegPlus;	public ModelRenderer rightLegPlus2;	public ModelRenderer leftArm;	public ModelRenderer leftArm2;	public ModelRenderer leftArmPlus;	public ModelRenderer leftArmPlus2;	public ModelRenderer leftHand;	public ModelRenderer leftLeg;	public ModelRenderer leftLeg2;	public ModelRenderer leftLegPlus;	public ModelRenderer leftLegPlus2;	public ModelRenderer lowerBody;	public ModelRenderer upperBody;	public ModelRenderer hip;	public ModelRenderer rightShoulder;	public ModelRenderer leftShoulder;	public ModelRenderer center;	public ModelRenderer leftLegIK;	public ModelRenderer rightLegIK;		public ModelModchuBaseAction() {		this(0.0F);	}		public ModelModchuBaseAction(float psize) {		this(psize, 0.0F);	}		public ModelModchuBaseAction(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}	public ModelModchuBaseAction(float psize, float pyoffset, int par3, int par4, Object... o) {		super(psize, pyoffset, par3 < 0 ? 64 : par3, par4 < 0 ? 32 : par4, (Object[]) o);	}	@Override	public void afterInit(float f, float f1) {		armsinit(f, f1);		bonesInit(f, f1);		actionPartsInit(f, f1);		defaultAddChild();	}		public void actionPartsInit(float f, float f1) {	}		public void bonesInit(float f, float f1) {		lowerBody = new ModelRenderer(this);		upperBody = new ModelRenderer(this);		hip = new ModelRenderer(this);		rightShoulder = new ModelRenderer(this);		leftShoulder = new ModelRenderer(this);		center = new ModelRenderer(this);		leftLegIK = new ModelRenderer(this);		rightLegIK = new ModelRenderer(this);	}//	@Override//	public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {//		ModelRenderer m;///*//		center.rotationPointX = Modchu_Debug.debaf1;//		center.rotationPointY = Modchu_Debug.debaf2;//		center.rotationPointZ = Modchu_Debug.debaf3;//*////*//		rightLegIK.rotationPointX = Modchu_Debug.debaf1;//		rightLegIK.rotationPointY = Modchu_Debug.debaf2;//		rightLegIK.rotationPointZ = Modchu_Debug.debaf3;//		//Modchu_Debug.debafNormalise(-3.141592653F, 3.141592653F);//		Modchu_Debug.dDebug("debaf1="+Modchu_Debug.debaf1+" debaf2="+Modchu_Debug.debaf2+" debaf3="+Modchu_Debug.debaf3);//*///		int boxSizeX;//		int boxSizeY;//		int boxSizeZ;//		float X = 0.0F;//		float Y = 0.0F;//		float Z = 0.0F;//		float tempX = 0.0F;//		float f7 = 0.0F;//		//Modchu_Debug.mDebug("boneProcessing center.rotationPointX="+center.rotationPointX);//		//Modchu_Debug.mDebug("boneProcessing center.rotationPointY="+center.rotationPointY);//		//Modchu_Debug.mDebug("boneProcessing center.rotationPointZ="+center.rotationPointZ);//		List<ModelRenderer> boneChildModels = center != null ? center.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			mainFrame.rotationPointX += center.rotationPointX;//			mainFrame.rotationPointY += center.rotationPointY;//			mainFrame.rotationPointZ += center.rotationPointZ;///*//			leftLegIK.rotationPointX -= center.rotationPointX;//			leftLegIK.rotationPointY -= center.rotationPointY;//			leftLegIK.rotationPointZ -= center.rotationPointZ;//			rightLegIK.rotationPointX -= center.rotationPointX;//			rightLegIK.rotationPointY -= center.rotationPointY;//			rightLegIK.rotationPointZ -= center.rotationPointZ;//*///			upperBody.rotateAngleX += center.rotateAngleX;//			upperBody.rotateAngleY += center.rotateAngleY;//			upperBody.rotateAngleZ += center.rotateAngleZ;//		}//		boneChildModels = hip != null ? hip.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			upperBody.setRotateAngle(upperBody.rotateAngleX - hip.rotateAngleX, upperBody.rotateAngleY - hip.rotateAngleY, upperBody.rotateAngleZ - hip.rotateAngleZ);//			//lowerBody.setRotateAngle(lowerBody.rotateAngleX - hip.rotateAngleX, lowerBody.rotateAngleY + hip.rotateAngleY, lowerBody.rotateAngleZ + hip.rotateAngleZ);///*//			int bodyBoxSizeX = bipedBody.getBoxSizeX();//			int bodyBoxSizeY = bipedBody.getBoxSizeY();//			int bodyBoxSizeZ = bipedBody.getBoxSizeZ();//			for (int i = 0; i < hip.boneChildModels.size(); i++) {//				m = (ModchuModel_ModelRenderer) hip.boneChildModels.get(i);//				if (m != null); else continue;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				f7 = hip.rotateAngleX > 0.0F ? hip.rotateAngleX : -hip.rotateAngleX;//				Y = bodyBoxSizeY * (1.0F - mh_cos(f7));//				Z = bodyBoxSizeY * mh_sin(f7);//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing 2 ="+(mh_cos(hip.rotateAngleX)));//				m.rotationPointY += hip.rotateAngleX > 0.0F ? -Y : -Y;//				m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;////				//f7 = hip.rotateAngleX > 0.0F ? hip.rotateAngleX : -hip.rotateAngleX;//				//Y = boxSizeY * (1.0F - mh_cos(f7));//				//Z = boxSizeY * mh_sin(f7);//				//m.rotationPointY += hip.rotateAngleX > 0.0F ? -Y : -Y;//				//m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;////				//Modchu_Debug.mDebug("boneProcessing mh_cos(hip.rotateAngleX)="+mh_cos(hip.rotateAngleX));//				//Modchu_Debug.mDebug("boneProcessing hip.rotateAngleX="+hip.rotateAngleX);//				//Modchu_Debug.dDebug("boneProcessing debaY="+Y+" debaZ="+Z+" mh_cos:"+mh_cos(hip.rotateAngleX));//				//m.rotationPointX += 6F * mh_cos(hip.rotateAngleZ);////				//Y = boxSizeZ * (1.0F - mh_cos(f7));//				//Z = boxSizeZ * mh_sin(f7);//				//m.rotationPointY += hip.rotateAngleX > 0.0F ? Y : Y;//				//m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing Y="+Y);////				f7 = hip.rotateAngleZ > 0.0F ? hip.rotateAngleZ : -hip.rotateAngleZ;//				X = boxSizeX * mh_sin(f7);//				Y = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing X="+X);////				m.rotationPointX += hip.rotateAngleZ > 0.0F ? X : -X;//				m.rotationPointY += -Y;////				tempX = (boxSizeX * 1.5F) * mh_sin(f7);//			}//*///		}////		boneChildModels = lowerBody != null ? lowerBody.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleX="+lowerBody.rotateAngleX);//			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleY="+lowerBody.rotateAngleY);//			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleZ="+lowerBody.rotateAngleZ);//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				f7 = lowerBody.rotateAngleX > 0.0F ? lowerBody.rotateAngleX : -lowerBody.rotateAngleX;//				X = (boxSizeX / 1.5F) * mh_sin(f7);//				Y = boxSizeX * (1.0F - mh_cos(f7));//				Z = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));//				//Z = (boxSizeX / 2.0F) * mh_sin(f7);//				//Modchu_Debug.mDebug("boneProcessing boxSizeX="+boxSizeX);//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing X="+X);//				//Modchu_Debug.mDebug("boneProcessing Y="+Y);//				//m.rotationPointX -= lowerBody.rotateAngleX > 0.0F ? -X : X;//				m.rotationPointY -= Y > 1.0F ? 1.0F : Y < 0.0F ? 0.0F : Y;//				if (Z > 1.5F) Z = 1.5F;//				if (Z < -1.5F) Z = -1.5F;//				m.rotationPointZ -= lowerBody.rotateAngleX > 0.0F ? Z : -Z;//				//X = X / 10.0F;//				Y = Y * 5.0F;//				if (Y > 0.5F) Y = 0.5F;//				if (Y < -0.5F) Y = -0.5F;//				m.rotateAngleX += lowerBody.rotateAngleX > 0.0F ? Y : -Y;//				//m.rotateAngleY += lowerBody.rotateAngleY > 0.0F ? X : X;///*//				Vector3f result = new Vector3f(m.rotationPointX, m.rotationPointY, m.rotationPointZ);//				result = ModchuModel_rotateUtil.setRotation(0.0F, boxSizeY, 0.0F, X, Y, Z, m.rotateAngleX, m.rotateAngleY, m.rotateAngleZ, result);//				X = result.x;//				Y = result.y;//				Z = result.z;//				m.rotateAngleX += X;//				Modchu_Debug.dDebug("boneProcessing X="+X+" Y="+Y+" Z="+Z, 1);//*////*//				f7 = lowerBody.rotateAngleY > 0.0F ? lowerBody.rotateAngleY : -lowerBody.rotateAngleY;//				X = (boxSizeX / 1.5F) * mh_sin(f7);//				Y += (boxSizeX / 5.0F) * (1.0F - mh_cos(f7));//				Z = (boxSizeX * 2.0F) * mh_sin(f7);//				//Modchu_Debug.mDebug("boneProcessing X="+X);//				//m.rotationPointX += -X;//				//m.rotationPointY += -Y;//				//m.rotationPointZ -= -Z;//				X = X / 2.0F;//				m.rotateAngleX -= -X;//*///				f7 = lowerBody.rotateAngleZ > 0.0F ? lowerBody.rotateAngleZ : -lowerBody.rotateAngleZ;//				m.rotationPointX += lowerBody.rotateAngleZ > 0.0F ? tempX : -tempX;//				//X = (boxSizeX / 2.0F) * mh_sin(f7);//				Y = boxSizeX * mh_sin(f7) < 0.5F ? boxSizeX * mh_sin(f7) : 0.5F;//				Z = boxSizeX * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing Z="+Z);//				//m.rotationPointX += lowerBody.rotateAngleZ > 0.0F ? X : -X;//				//m.rotationPointY += -Y;//				//m.rotationPointZ += -Z;//				Z = Z * 5.0F;//				if (Z > 0.5F) Z = 0.5F;//				if (Z < -0.5F) Z = -0.5F;//				m.rotateAngleZ += lowerBody.rotateAngleZ > 0.0F ? Z : -Z;//			}//		}//		boneChildModels = upperBody != null ? upperBody.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			//Modchu_Debug.mDebug("boneProcessing upperBody.boneChildModels.size()="+upperBody.boneChildModels.size());//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				m.rotateAngleX += upperBody.rotateAngleX;//				m.rotateAngleY += upperBody.rotateAngleY;//				m.rotateAngleZ += upperBody.rotateAngleZ;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				f7 = upperBody.rotateAngleX > 0.0F ? upperBody.rotateAngleX : -upperBody.rotateAngleX;//				m.rotationPointY += upperBody.rotateAngleX > 0.0F ? Y : Y;//				Y = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));//				Z = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing upperBody f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing upperBody boxSizeZ="+boxSizeZ);//				//Modchu_Debug.mDebug("boneProcessing upperBody Z="+Z);//				m.rotationPointY += upperBody.rotateAngleX > 0.0F ? Y : Y;//				m.rotationPointZ += upperBody.rotateAngleX > 0.0F ? -Z : Z;////				f7 = upperBody.rotateAngleZ > 0.0F ? upperBody.rotateAngleZ : -upperBody.rotateAngleZ;//				X = (boxSizeX / 2.0F) * mh_sin(f7);//				Y = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing upperBody X="+X);//				m.rotationPointX += upperBody.rotateAngleZ > 0.0F ? X : -X;//				m.rotationPointY += Y;//			}//			List<ModelRenderer> boneSpecialChildModels = upperBody != null ? upperBody.getBoneSpecialChildModels() : null;//			for (int i = 0; i < boneSpecialChildModels.size(); i++) {//				m = boneSpecialChildModels.get(i);//				if (m != null); else continue;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				m.rotateAngleX -= upperBody.rotateAngleX;//				m.rotateAngleZ -= upperBody.rotateAngleZ;///*//				f7 = upperBody.rotateAngleY > 0.0F ? upperBody.rotateAngleY : -upperBody.rotateAngleY;//				Y = (boxSizeY / 2.0F) * mh_sin(f7);//				Z = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));//				m.rotateAngleX -= upperBody.rotateAngleY > 0.0F ? Y : Y;//				m.rotateAngleZ -= upperBody.rotateAngleY > 0.0F ? Z : Z;//*///			}//		}//		//Modchu_Debug.mDebug("mainFrame.boneChildModels="+mainFrame.boneChildModels);//		boneChildModels = rightShoulder != null ? rightShoulder.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				m.rotateAngleX += rightShoulder.rotateAngleX;//				m.rotateAngleY += rightShoulder.rotateAngleY;//				m.rotateAngleZ += rightShoulder.rotateAngleZ;//			}//		}//		boneChildModels = leftShoulder != null ? leftShoulder.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				m.rotateAngleX += leftShoulder.rotateAngleX;//				m.rotateAngleY += leftShoulder.rotateAngleY;//				m.rotateAngleZ += leftShoulder.rotateAngleZ;//			}//		}//		IKProcessing(leftLegIK);//		IKProcessing(rightLegIK);//	}////	public void IKProcessing(ModelRenderer IK) {//		ModelRenderer m;//		int boxSizeX;//		int boxSizeY;//		int boxSizeZ;//		float X = 0.0F;//		float Y = 0.0F;//		float Z = 0.0F;//		float f7 = 0.0F;//		List<ModelRenderer> boneChildModels = IK != null ? IK.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()); else return;//		for (int i = 0; i < boneChildModels.size(); i++) {//			m = boneChildModels.get(i);//			if (m != null); else continue;//			boxSizeX = m.getBoxSizeX();//			boxSizeY = m.getBoxSizeY();//			boxSizeZ = m.getBoxSizeZ();//			float fz1 = IK.rotationPointX;//			float fz2 = -boxSizeY;//			if (fz1 == 0.0F//					&& fz2 == 0.0F) {//				X = 0.0F;//			} else {//				X = (float) Math.atan2(fz2, fz1) + 1.570796313F;//			}//			m.rotateAngleZ += X;///*//			fz1 = IK.rotationPointY;//			fz2 = -boxSizeY;//			if (fz1 == 0.0F//					&& fz2 == 0.0F) {//				Y = 0.0F;//			} else {//				Y = (float) Math.atan2(fz2, fz1) + 1.570796313F;//			}//			m.rotateAngleX += Y;//*///			fz1 = IK.rotationPointZ;//			fz2 = -boxSizeY;//			if (fz1 == 0.0F//					&& fz2 == 0.0F) {//				Z = 0.0F;//			} else {//				Z = (float) Math.atan2(fz2, fz1) + 1.570796313F;//			}//			m.rotateAngleX += Z;//			//Modchu_Debug.dDebug("leftLegIK X="+X+" Z="+Z, 1);//		}//		int boxSizeY2 = 0;//		ModelRenderer m2 = null;//		int i = 0;//		for (ModelRenderer m1 : boneChildModels) {//			if (m1 != null); else continue;//			boxSizeY = m1.getBoxSizeY();//			List<ModelRenderer> boneSpecialChildModels = m1.getBoneSpecialChildModels();//			if (boneSpecialChildModels != null//					&& !boneSpecialChildModels.isEmpty()); else {//				//Modchu_Debug.mDebug("boneSpecialChildModels == null !! m1.getBoxName()="+m1.getBoxName());//				//Modchu_Debug.mDebug("boneSpecialChildModels == null !! boneSpecialChildModels="+boneSpecialChildModels);//				continue;//			}//			Modchu_Debug.mDebug("boneSpecialChildModels != null !! boneSpecialChildModels="+boneSpecialChildModels);//			if (i >= boneSpecialChildModels.size()) break;//			m2 = boneSpecialChildModels.get(i);//			i++;//			if (m2 != null) boxSizeY2 = m2.getBoxSizeY();//			else continue;//			//Modchu_Debug.mDebug("m2 != null boxSizeY2="+boxSizeY2);//			boxSizeY += boxSizeY2;//			float x1 = 0.0F;//			float y1 = 0.0F;//			float z1 = 0.0F;//			float x2 = IK.rotationPointX;//			float y2 = IK.rotationPointY + boxSizeY;//			float z2 = IK.rotationPointZ;//			float ff1 = (float)Math.sqrt((double)(x1-x2)*(double)(x1-x2) + (double)(y1-y2)*(double)(y1-y2) + (double)(z1-z2)*(double)(z1-z2));//			//f7 = IK.rotationPointY > boxSizeY ? boxSizeY : IK.rotationPointY;//			if (ff1 < boxSizeY) {//				ff1 = 1.570796313F * (ff1 - boxSizeY);//				m1.addRotateAngleX(ff1);//				m2.addRotateAngleX(-ff1 * 2F);//			}//			m1.rotateAngleX = Modchu_Main.floatNormalise(m1.rotateAngleX, -1.570796313F, 1.570796313F);//			if (m2.rotateAngleX > 3.14159265F) m2.rotateAngleX = Modchu_Main.floatNormalise(m2.rotateAngleX, -3.14159265F, 3.14159265F);//			Modchu_Debug.dDebug("leftLegIK boxSizeY="+boxSizeY, 3);//			Modchu_Debug.dDebug("leftLegIK m.rotateAngleX="+m1.rotateAngleX, 3);//		}//	}	@Override	public void setArmorBipedRightArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightArm, b);		if (rightArm != null) setCapsValue(entityCaps, caps_visible, rightArm, b);		if (rightArm2 != null) setCapsValue(entityCaps, caps_visible, rightArm2, b);		if (rightHand != null) setCapsValue(entityCaps, caps_visible, rightHand, b);	}	@Override	public void setArmorBipedLeftArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftArm, b);		if (leftArm != null) setCapsValue(entityCaps, caps_visible, leftArm, b);		if (leftArm2 != null) setCapsValue(entityCaps, caps_visible, leftArm2, b);		if (leftHand != null) setCapsValue(entityCaps, caps_visible, leftHand, b);	}	@Override	public void setArmorBipedRightLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightLeg, b);		if (rightLeg != null) setCapsValue(entityCaps, caps_visible, rightLeg, b);		if (rightLeg2 != null) setCapsValue(entityCaps, caps_visible, rightLeg2, b);	}	@Override	public void setArmorBipedLeftLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftLeg, b);		if (leftLeg != null) setCapsValue(entityCaps, caps_visible, leftLeg, b);		if (leftLeg2 != null) setCapsValue(entityCaps, caps_visible, leftLeg2, b);	}	public void setArmorBipedOtherShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedHeadwear, b);	}}
+package littleMaidMobX.model.modchu;import littleMaidMobX.model.caps.IModelCaps;import littleMaidMobX.render.model.ModelRenderer;public abstract class ModelModchuBaseAction extends ModelModchuBaseBiped {	public ModelRenderer rightArm;	public ModelRenderer rightArm2;	public ModelRenderer rightArmPlus;	public ModelRenderer rightArmPlus2;	public ModelRenderer rightHand;	public ModelRenderer rightLeg;	public ModelRenderer rightLeg2;	public ModelRenderer rightLegPlus;	public ModelRenderer rightLegPlus2;	public ModelRenderer leftArm;	public ModelRenderer leftArm2;	public ModelRenderer leftArmPlus;	public ModelRenderer leftArmPlus2;	public ModelRenderer leftHand;	public ModelRenderer leftLeg;	public ModelRenderer leftLeg2;	public ModelRenderer leftLegPlus;	public ModelRenderer leftLegPlus2;	public ModelRenderer lowerBody;	public ModelRenderer upperBody;	public ModelRenderer hip;	public ModelRenderer rightShoulder;	public ModelRenderer leftShoulder;	public ModelRenderer center;	public ModelRenderer leftLegIK;	public ModelRenderer rightLegIK;		public ModelModchuBaseAction() {		this(0.0F);	}		public ModelModchuBaseAction(float psize) {		this(psize, 0.0F);	}		public ModelModchuBaseAction(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}	public ModelModchuBaseAction(float psize, float pyoffset, int par3, int par4, Object... o) {		super(psize, pyoffset, par3 < 0 ? 64 : par3, par4 < 0 ? 32 : par4, (Object[]) o);	}	@Override	public void afterInit(float f, float f1) {		armsinit(f, f1);		bonesInit(f, f1);		actionPartsInit(f, f1);		defaultAddChild();	}		public void actionPartsInit(float f, float f1) {	}		public void bonesInit(float f, float f1) {		lowerBody = new ModelRenderer(this, "lowerBody");		upperBody = new ModelRenderer(this, "upperBody");		hip = new ModelRenderer(this, "hip");		rightShoulder = new ModelRenderer(this, "rightShoulder");		leftShoulder = new ModelRenderer(this, "leftShoulder");		center = new ModelRenderer(this, "center");		leftLegIK = new ModelRenderer(this, "leftLegIK");		rightLegIK = new ModelRenderer(this, "rightLegIK");	}//	@Override//	public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {//		ModelRenderer m;///*//		center.rotationPointX = Modchu_Debug.debaf1;//		center.rotationPointY = Modchu_Debug.debaf2;//		center.rotationPointZ = Modchu_Debug.debaf3;//*////*//		rightLegIK.rotationPointX = Modchu_Debug.debaf1;//		rightLegIK.rotationPointY = Modchu_Debug.debaf2;//		rightLegIK.rotationPointZ = Modchu_Debug.debaf3;//		//Modchu_Debug.debafNormalise(-3.141592653F, 3.141592653F);//		Modchu_Debug.dDebug("debaf1="+Modchu_Debug.debaf1+" debaf2="+Modchu_Debug.debaf2+" debaf3="+Modchu_Debug.debaf3);//*///		int boxSizeX;//		int boxSizeY;//		int boxSizeZ;//		float X = 0.0F;//		float Y = 0.0F;//		float Z = 0.0F;//		float tempX = 0.0F;//		float f7 = 0.0F;//		//Modchu_Debug.mDebug("boneProcessing center.rotationPointX="+center.rotationPointX);//		//Modchu_Debug.mDebug("boneProcessing center.rotationPointY="+center.rotationPointY);//		//Modchu_Debug.mDebug("boneProcessing center.rotationPointZ="+center.rotationPointZ);//		List<ModelRenderer> boneChildModels = center != null ? center.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			mainFrame.rotationPointX += center.rotationPointX;//			mainFrame.rotationPointY += center.rotationPointY;//			mainFrame.rotationPointZ += center.rotationPointZ;///*//			leftLegIK.rotationPointX -= center.rotationPointX;//			leftLegIK.rotationPointY -= center.rotationPointY;//			leftLegIK.rotationPointZ -= center.rotationPointZ;//			rightLegIK.rotationPointX -= center.rotationPointX;//			rightLegIK.rotationPointY -= center.rotationPointY;//			rightLegIK.rotationPointZ -= center.rotationPointZ;//*///			upperBody.rotateAngleX += center.rotateAngleX;//			upperBody.rotateAngleY += center.rotateAngleY;//			upperBody.rotateAngleZ += center.rotateAngleZ;//		}//		boneChildModels = hip != null ? hip.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			upperBody.setRotateAngle(upperBody.rotateAngleX - hip.rotateAngleX, upperBody.rotateAngleY - hip.rotateAngleY, upperBody.rotateAngleZ - hip.rotateAngleZ);//			//lowerBody.setRotateAngle(lowerBody.rotateAngleX - hip.rotateAngleX, lowerBody.rotateAngleY + hip.rotateAngleY, lowerBody.rotateAngleZ + hip.rotateAngleZ);///*//			int bodyBoxSizeX = bipedBody.getBoxSizeX();//			int bodyBoxSizeY = bipedBody.getBoxSizeY();//			int bodyBoxSizeZ = bipedBody.getBoxSizeZ();//			for (int i = 0; i < hip.boneChildModels.size(); i++) {//				m = (ModchuModel_ModelRenderer) hip.boneChildModels.get(i);//				if (m != null); else continue;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				f7 = hip.rotateAngleX > 0.0F ? hip.rotateAngleX : -hip.rotateAngleX;//				Y = bodyBoxSizeY * (1.0F - mh_cos(f7));//				Z = bodyBoxSizeY * mh_sin(f7);//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing 2 ="+(mh_cos(hip.rotateAngleX)));//				m.rotationPointY += hip.rotateAngleX > 0.0F ? -Y : -Y;//				m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;////				//f7 = hip.rotateAngleX > 0.0F ? hip.rotateAngleX : -hip.rotateAngleX;//				//Y = boxSizeY * (1.0F - mh_cos(f7));//				//Z = boxSizeY * mh_sin(f7);//				//m.rotationPointY += hip.rotateAngleX > 0.0F ? -Y : -Y;//				//m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;////				//Modchu_Debug.mDebug("boneProcessing mh_cos(hip.rotateAngleX)="+mh_cos(hip.rotateAngleX));//				//Modchu_Debug.mDebug("boneProcessing hip.rotateAngleX="+hip.rotateAngleX);//				//Modchu_Debug.dDebug("boneProcessing debaY="+Y+" debaZ="+Z+" mh_cos:"+mh_cos(hip.rotateAngleX));//				//m.rotationPointX += 6F * mh_cos(hip.rotateAngleZ);////				//Y = boxSizeZ * (1.0F - mh_cos(f7));//				//Z = boxSizeZ * mh_sin(f7);//				//m.rotationPointY += hip.rotateAngleX > 0.0F ? Y : Y;//				//m.rotationPointZ += hip.rotateAngleX > 0.0F ? -Z : Z;//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing Y="+Y);////				f7 = hip.rotateAngleZ > 0.0F ? hip.rotateAngleZ : -hip.rotateAngleZ;//				X = boxSizeX * mh_sin(f7);//				Y = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing X="+X);////				m.rotationPointX += hip.rotateAngleZ > 0.0F ? X : -X;//				m.rotationPointY += -Y;////				tempX = (boxSizeX * 1.5F) * mh_sin(f7);//			}//*///		}////		boneChildModels = lowerBody != null ? lowerBody.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleX="+lowerBody.rotateAngleX);//			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleY="+lowerBody.rotateAngleY);//			//Modchu_Debug.mDebug("lowerBody lowerBody.rotateAngleZ="+lowerBody.rotateAngleZ);//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				f7 = lowerBody.rotateAngleX > 0.0F ? lowerBody.rotateAngleX : -lowerBody.rotateAngleX;//				X = (boxSizeX / 1.5F) * mh_sin(f7);//				Y = boxSizeX * (1.0F - mh_cos(f7));//				Z = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));//				//Z = (boxSizeX / 2.0F) * mh_sin(f7);//				//Modchu_Debug.mDebug("boneProcessing boxSizeX="+boxSizeX);//				//Modchu_Debug.mDebug("boneProcessing f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing X="+X);//				//Modchu_Debug.mDebug("boneProcessing Y="+Y);//				//m.rotationPointX -= lowerBody.rotateAngleX > 0.0F ? -X : X;//				m.rotationPointY -= Y > 1.0F ? 1.0F : Y < 0.0F ? 0.0F : Y;//				if (Z > 1.5F) Z = 1.5F;//				if (Z < -1.5F) Z = -1.5F;//				m.rotationPointZ -= lowerBody.rotateAngleX > 0.0F ? Z : -Z;//				//X = X / 10.0F;//				Y = Y * 5.0F;//				if (Y > 0.5F) Y = 0.5F;//				if (Y < -0.5F) Y = -0.5F;//				m.rotateAngleX += lowerBody.rotateAngleX > 0.0F ? Y : -Y;//				//m.rotateAngleY += lowerBody.rotateAngleY > 0.0F ? X : X;///*//				Vector3f result = new Vector3f(m.rotationPointX, m.rotationPointY, m.rotationPointZ);//				result = ModchuModel_rotateUtil.setRotation(0.0F, boxSizeY, 0.0F, X, Y, Z, m.rotateAngleX, m.rotateAngleY, m.rotateAngleZ, result);//				X = result.x;//				Y = result.y;//				Z = result.z;//				m.rotateAngleX += X;//				Modchu_Debug.dDebug("boneProcessing X="+X+" Y="+Y+" Z="+Z, 1);//*////*//				f7 = lowerBody.rotateAngleY > 0.0F ? lowerBody.rotateAngleY : -lowerBody.rotateAngleY;//				X = (boxSizeX / 1.5F) * mh_sin(f7);//				Y += (boxSizeX / 5.0F) * (1.0F - mh_cos(f7));//				Z = (boxSizeX * 2.0F) * mh_sin(f7);//				//Modchu_Debug.mDebug("boneProcessing X="+X);//				//m.rotationPointX += -X;//				//m.rotationPointY += -Y;//				//m.rotationPointZ -= -Z;//				X = X / 2.0F;//				m.rotateAngleX -= -X;//*///				f7 = lowerBody.rotateAngleZ > 0.0F ? lowerBody.rotateAngleZ : -lowerBody.rotateAngleZ;//				m.rotationPointX += lowerBody.rotateAngleZ > 0.0F ? tempX : -tempX;//				//X = (boxSizeX / 2.0F) * mh_sin(f7);//				Y = boxSizeX * mh_sin(f7) < 0.5F ? boxSizeX * mh_sin(f7) : 0.5F;//				Z = boxSizeX * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing Z="+Z);//				//m.rotationPointX += lowerBody.rotateAngleZ > 0.0F ? X : -X;//				//m.rotationPointY += -Y;//				//m.rotationPointZ += -Z;//				Z = Z * 5.0F;//				if (Z > 0.5F) Z = 0.5F;//				if (Z < -0.5F) Z = -0.5F;//				m.rotateAngleZ += lowerBody.rotateAngleZ > 0.0F ? Z : -Z;//			}//		}//		boneChildModels = upperBody != null ? upperBody.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			//Modchu_Debug.mDebug("boneProcessing upperBody.boneChildModels.size()="+upperBody.boneChildModels.size());//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				m.rotateAngleX += upperBody.rotateAngleX;//				m.rotateAngleY += upperBody.rotateAngleY;//				m.rotateAngleZ += upperBody.rotateAngleZ;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				f7 = upperBody.rotateAngleX > 0.0F ? upperBody.rotateAngleX : -upperBody.rotateAngleX;//				m.rotationPointY += upperBody.rotateAngleX > 0.0F ? Y : Y;//				Y = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));//				Z = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing upperBody f7="+f7);//				//Modchu_Debug.mDebug("boneProcessing upperBody boxSizeZ="+boxSizeZ);//				//Modchu_Debug.mDebug("boneProcessing upperBody Z="+Z);//				m.rotationPointY += upperBody.rotateAngleX > 0.0F ? Y : Y;//				m.rotationPointZ += upperBody.rotateAngleX > 0.0F ? -Z : Z;////				f7 = upperBody.rotateAngleZ > 0.0F ? upperBody.rotateAngleZ : -upperBody.rotateAngleZ;//				X = (boxSizeX / 2.0F) * mh_sin(f7);//				Y = (boxSizeX / 2.0F) * (1.0F - mh_cos(f7));//				//Modchu_Debug.mDebug("boneProcessing upperBody X="+X);//				m.rotationPointX += upperBody.rotateAngleZ > 0.0F ? X : -X;//				m.rotationPointY += Y;//			}//			List<ModelRenderer> boneSpecialChildModels = upperBody != null ? upperBody.getBoneSpecialChildModels() : null;//			for (int i = 0; i < boneSpecialChildModels.size(); i++) {//				m = boneSpecialChildModels.get(i);//				if (m != null); else continue;//				boxSizeX = m.getBoxSizeX();//				boxSizeY = m.getBoxSizeY();//				boxSizeZ = m.getBoxSizeZ();////				m.rotateAngleX -= upperBody.rotateAngleX;//				m.rotateAngleZ -= upperBody.rotateAngleZ;///*//				f7 = upperBody.rotateAngleY > 0.0F ? upperBody.rotateAngleY : -upperBody.rotateAngleY;//				Y = (boxSizeY / 2.0F) * mh_sin(f7);//				Z = (boxSizeZ / 2.0F) * (1.0F - mh_cos(f7));//				m.rotateAngleX -= upperBody.rotateAngleY > 0.0F ? Y : Y;//				m.rotateAngleZ -= upperBody.rotateAngleY > 0.0F ? Z : Z;//*///			}//		}//		//Modchu_Debug.mDebug("mainFrame.boneChildModels="+mainFrame.boneChildModels);//		boneChildModels = rightShoulder != null ? rightShoulder.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				m.rotateAngleX += rightShoulder.rotateAngleX;//				m.rotateAngleY += rightShoulder.rotateAngleY;//				m.rotateAngleZ += rightShoulder.rotateAngleZ;//			}//		}//		boneChildModels = leftShoulder != null ? leftShoulder.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()) {//			for (int i = 0; i < boneChildModels.size(); i++) {//				m = boneChildModels.get(i);//				if (m != null); else continue;//				m.rotateAngleX += leftShoulder.rotateAngleX;//				m.rotateAngleY += leftShoulder.rotateAngleY;//				m.rotateAngleZ += leftShoulder.rotateAngleZ;//			}//		}//		IKProcessing(leftLegIK);//		IKProcessing(rightLegIK);//	}////	public void IKProcessing(ModelRenderer IK) {//		ModelRenderer m;//		int boxSizeX;//		int boxSizeY;//		int boxSizeZ;//		float X = 0.0F;//		float Y = 0.0F;//		float Z = 0.0F;//		float f7 = 0.0F;//		List<ModelRenderer> boneChildModels = IK != null ? IK.getBoneChildModels() : null;//		if (boneChildModels != null//				&& !boneChildModels.isEmpty()); else return;//		for (int i = 0; i < boneChildModels.size(); i++) {//			m = boneChildModels.get(i);//			if (m != null); else continue;//			boxSizeX = m.getBoxSizeX();//			boxSizeY = m.getBoxSizeY();//			boxSizeZ = m.getBoxSizeZ();//			float fz1 = IK.rotationPointX;//			float fz2 = -boxSizeY;//			if (fz1 == 0.0F//					&& fz2 == 0.0F) {//				X = 0.0F;//			} else {//				X = (float) Math.atan2(fz2, fz1) + 1.570796313F;//			}//			m.rotateAngleZ += X;///*//			fz1 = IK.rotationPointY;//			fz2 = -boxSizeY;//			if (fz1 == 0.0F//					&& fz2 == 0.0F) {//				Y = 0.0F;//			} else {//				Y = (float) Math.atan2(fz2, fz1) + 1.570796313F;//			}//			m.rotateAngleX += Y;//*///			fz1 = IK.rotationPointZ;//			fz2 = -boxSizeY;//			if (fz1 == 0.0F//					&& fz2 == 0.0F) {//				Z = 0.0F;//			} else {//				Z = (float) Math.atan2(fz2, fz1) + 1.570796313F;//			}//			m.rotateAngleX += Z;//			//Modchu_Debug.dDebug("leftLegIK X="+X+" Z="+Z, 1);//		}//		int boxSizeY2 = 0;//		ModelRenderer m2 = null;//		int i = 0;//		for (ModelRenderer m1 : boneChildModels) {//			if (m1 != null); else continue;//			boxSizeY = m1.getBoxSizeY();//			List<ModelRenderer> boneSpecialChildModels = m1.getBoneSpecialChildModels();//			if (boneSpecialChildModels != null//					&& !boneSpecialChildModels.isEmpty()); else {//				//Modchu_Debug.mDebug("boneSpecialChildModels == null !! m1.getBoxName()="+m1.getBoxName());//				//Modchu_Debug.mDebug("boneSpecialChildModels == null !! boneSpecialChildModels="+boneSpecialChildModels);//				continue;//			}//			Modchu_Debug.mDebug("boneSpecialChildModels != null !! boneSpecialChildModels="+boneSpecialChildModels);//			if (i >= boneSpecialChildModels.size()) break;//			m2 = boneSpecialChildModels.get(i);//			i++;//			if (m2 != null) boxSizeY2 = m2.getBoxSizeY();//			else continue;//			//Modchu_Debug.mDebug("m2 != null boxSizeY2="+boxSizeY2);//			boxSizeY += boxSizeY2;//			float x1 = 0.0F;//			float y1 = 0.0F;//			float z1 = 0.0F;//			float x2 = IK.rotationPointX;//			float y2 = IK.rotationPointY + boxSizeY;//			float z2 = IK.rotationPointZ;//			float ff1 = (float)Math.sqrt((double)(x1-x2)*(double)(x1-x2) + (double)(y1-y2)*(double)(y1-y2) + (double)(z1-z2)*(double)(z1-z2));//			//f7 = IK.rotationPointY > boxSizeY ? boxSizeY : IK.rotationPointY;//			if (ff1 < boxSizeY) {//				ff1 = 1.570796313F * (ff1 - boxSizeY);//				m1.addRotateAngleX(ff1);//				m2.addRotateAngleX(-ff1 * 2F);//			}//			m1.rotateAngleX = Modchu_Main.floatNormalise(m1.rotateAngleX, -1.570796313F, 1.570796313F);//			if (m2.rotateAngleX > 3.14159265F) m2.rotateAngleX = Modchu_Main.floatNormalise(m2.rotateAngleX, -3.14159265F, 3.14159265F);//			Modchu_Debug.dDebug("leftLegIK boxSizeY="+boxSizeY, 3);//			Modchu_Debug.dDebug("leftLegIK m.rotateAngleX="+m1.rotateAngleX, 3);//		}//	}	@Override	public void setArmorBipedRightArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightArm, b);		if (rightArm != null) setCapsValue(entityCaps, caps_visible, rightArm, b);		if (rightArm2 != null) setCapsValue(entityCaps, caps_visible, rightArm2, b);		if (rightHand != null) setCapsValue(entityCaps, caps_visible, rightHand, b);	}	@Override	public void setArmorBipedLeftArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftArm, b);		if (leftArm != null) setCapsValue(entityCaps, caps_visible, leftArm, b);		if (leftArm2 != null) setCapsValue(entityCaps, caps_visible, leftArm2, b);		if (leftHand != null) setCapsValue(entityCaps, caps_visible, leftHand, b);	}	@Override	public void setArmorBipedRightLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightLeg, b);		if (rightLeg != null) setCapsValue(entityCaps, caps_visible, rightLeg, b);		if (rightLeg2 != null) setCapsValue(entityCaps, caps_visible, rightLeg2, b);	}	@Override	public void setArmorBipedLeftLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftLeg, b);		if (leftLeg != null) setCapsValue(entityCaps, caps_visible, leftLeg, b);		if (leftLeg2 != null) setCapsValue(entityCaps, caps_visible, leftLeg2, b);	}	public void setArmorBipedOtherShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedHeadwear, b);	}}
diff --git a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseBiped.java b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseBiped.java
index 3907b32..86e2c78 100755
--- a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseBiped.java
+++ b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseBiped.java
@@ -1 +1 @@
-package littleMaidMobX.model.modchu;import littleMaidMobX.Helper;import littleMaidMobX.LittleMaidMobX;import littleMaidMobX.config.ModelConfig;import littleMaidMobX.entity.EntityLittleMaid;import littleMaidMobX.model.ModelMultiBase;import littleMaidMobX.model.caps.IModelCaps;import littleMaidMobX.model.caps.ModelCapsHelper;import littleMaidMobX.model.maids.MultiModel_NM;import littleMaidMobX.render.model.ModelRenderer;import net.minecraft.block.Block;import net.minecraft.init.Blocks;import net.minecraft.inventory.IInventory;import net.minecraft.item.Item;import net.minecraft.item.ItemSkull;import net.minecraft.item.ItemStack;import org.lwjgl.opengl.GL11;public abstract class ModelModchuBaseBiped extends ModelMultiBase {	public ModelRenderer bipedHead;	public ModelRenderer bipedHeadwear;	public ModelRenderer bipedBody;	public ModelRenderer bipedRightArm;	public ModelRenderer bipedLeftArm;	public ModelRenderer bipedRightLeg;	public ModelRenderer bipedLeftLeg;	public ModelRenderer bipedEars;	public ModelRenderer bipedCloak;	public float modelSize;		public ModelModchuBaseBiped() {		this(0.0F);	}		public ModelModchuBaseBiped(float psize) {		this(psize, 0.0F);	}		public ModelModchuBaseBiped(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}		public ModelModchuBaseBiped(float psize, float pyoffset, int par3, int par4, Object... o) {		super(psize, pyoffset, par3, par4);		isSneak = false;		aimedBow = false;		textureWidth = par3 < 0 ? 64 : par3;		textureHeight = par4 < 0 ? 32 : par4;		initModel(psize, pyoffset, true);		modelSize = psize;		//Modchu_Debug.mDebug("this="+this+" modelSize="+modelSize);	}	public void afterInit(float f, float f1) {		armsinit(f, f1);		defaultAddChild();	}		public void armsinit(float f, float f1) {	}		public void defaultAddChild() {	}	@Override	public void render(IModelCaps entityCaps, float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, boolean pIsRender) {		setRotationAngles(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);		mainFrame.render(f5, pIsRender);	}	@Override	public void setLivingAnimations(IModelCaps entityCaps, float f, float f1, float f2) {//		entityCaps.setCapsValue(caps_setLivingAnimationsBefore, this, f, f1, f2);		setLivingAnimationsLM(entityCaps, f, f1, f2);//		if (entityCaps instanceof IModelCaps//				&& ModelCapsHelper.getCapsValueByte(this, entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM) {			setLivingAnimationsAfter(entityCaps, f, f1, f2);//		} else {//			entityCaps.setCapsValue(caps_setLivingAnimationsAfter, this, f, f1, f2);//		}	}	public void setLivingAnimationsLM(IModelCaps entityCaps, float f, float f1, float f2) {	}	@Override	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {		if (entityCaps != null); else {			if (LittleMaidMobX.isDebugModels)			LittleMaidMobX.DebugModel("setRotationAngles entityCaps == null !! this="+this);			//return;		}//		if (entityCaps != null) entityCaps.setCapsValue(caps_setRotationAnglesBefore, this, f, f1, f2, f3, f4, f5);		setRotationAnglesLM(f, f1, f2, f3, f4, f5, entityCaps);//		if (entityCaps != null) entityCaps.setCapsValue(caps_setRotationAnglesAfter, this, f, f1, f2, f3, f4, f5);	}	public void setRotationAnglesLM(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	@Override	public void renderItems(IModelCaps entityCaps) {		if (entityCaps != null) {			renderItemsLM(entityCaps);		}	}	public void renderItemsLM(IModelCaps entityCaps) {				GL11.glPushMatrix();		// R		Arms[0].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[0].renderItems(this, entityCaps, false, 0);		// L		Arms[1].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[1].renderItems(this, entityCaps, false, 1);		renderItemsHead(entityCaps);		renderItemsArmorHead(entityCaps);		GL11.glPopMatrix();	}	public void renderItemsHead(IModelCaps entityCaps) {				if (entityCaps != null); else return;		Object itemstack = entityCaps.getCapsValue(caps_HeadMount, 9);		boolean isPlanter = ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isPlanter, itemstack);		boolean isCamouflage = ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isCamouflage, itemstack);		int addSupport = addSupportChecks(entityCaps, itemstack);		//Modchu_Debug.mDebug("renderItemsHead itemstack="+itemstack);		//Modchu_Debug.mDebug("renderItemsHead isPlanter="+isPlanter);		//Modchu_Debug.mDebug("renderItemsHead isCamouflage="+isCamouflage);		//Modchu_Debug.mDebug("renderItemsHead addSupport="+addSupport);		if (isCamouflage				| isPlanter				| addSupport > -1) {//			float scale = 1.0F;			Object inventory = entityCaps.getCapsValue(caps_Inventory);			//Modchu_Debug.mDebug("renderItemsHead 2 inventory="+inventory);			if (inventory instanceof IInventory) {				/*Object pEntity = entityCaps.getCapsValue(caps_Entity);				int slot = pEntity instanceof EntityPlayer ? 10 : 16;				ItemStack itemstack1 = ((IInventory) inventory).getStackInSlot(slot);				//Modchu_Debug.mDebug("renderItemsHead 3 itemstack1="+itemstack1);				if (itemstack1 != null) {					Item item2 = itemstack1.getItem();					//Modchu_Debug.mDebug("renderItemsHead 4 item2="+item2);					//Modchu_Debug.mDebug("renderItemsHead 5 dyePowder="+dyePowder);					if (item2 == Items.dye) {						scale = 1.0F + (0.2F * itemstack1.getItemDamage());						//Modchu_Debug.mDebug("renderItemsHead 6 ");					}				}*/				//Modchu_Debug.mDebug("renderItemsHead addSupport="+addSupport);				if (isPlanter						| (addSupport > -1								&& addSupport < 3)) {					headTopLoadMatrix();					//TODO: implement new item render code in ModelRenderer. 					// tho i'm not sure what it does besides scaling and 1.8 support										HeadTop.renderItemsHead(this, entityCaps);//					HeadTop.renderItemsHead(this, entityCaps, scale, addSupport);//					Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, float.class, int.class }, HeadTop, new Object[]{ this, entityCaps, scale, addSupport });					//HeadTop.loadMatrix().renderItemsHead(this, entityCaps);				} else {					headMountLoadMatrix();					HeadMount.renderItemsHead(this, entityCaps);//					Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, scale, addSupport });					//HeadMount.loadMatrix().renderItemsHead(this, entityCaps);				}			}		}	}	public void headMountLoadMatrix() {		HeadMount.loadMatrix();	}	public void headTopLoadMatrix() {		HeadTop.loadMatrix();	}	public void renderItemsArmorHead(IModelCaps entityCaps) {				//Modchu_Debug.mDebug("renderItemsArmorHead");		Object itemstack = ModelCapsHelper.getCapsValue(entityCaps, caps_currentArmor, new Object[]{ 3 });		if (itemstack != null) {			//Modchu_Debug.mDebug("renderItemsArmorHead 1");			int addSupport = addSupportChecks(entityCaps, itemstack, 1);			headMountRenderItems(entityCaps, itemstack, addSupport);		}	}	public void headMountRenderItems(IModelCaps entityCaps, Object itemstack, int addSupport) {		Object pEntity = ModelCapsHelper.getCapsValue(entityCaps, IModelCaps.caps_Entity);		if (Helper.isCamouflage(itemstack) || Helper.isPlanter(itemstack) || addSupport > -1) {			//Modchu_Debug.mDebug("headMountRenderItems 1");			/*Object inventory = entityCaps.getCapsValue(caps_Inventory);			//Modchu_Debug.mDebug("renderItemsHead 2 inventory="+inventory);			float scale = 1.0F;			if (inventory instanceof IInventory) {				int slot = pEntity instanceof EntityPlayer ? 10 : 16;				ItemStack itemstack1 = ((IInventory) inventory).getStackInSlot(slot);				//Modchu_Debug.mDebug("renderItemsHead 3 itemstack1="+itemstack1);				if (itemstack1 != null) {					Item item2 = itemstack1.getItem();					//Modchu_Debug.mDebug("renderItemsHead 4 item2="+item2);					//Modchu_Debug.mDebug("renderItemsHead 5 dyePowder="+dyePowder);					if (item2 == Items.dye) {						scale = 1.0F + (0.2F * itemstack1.getItemDamage());						//Modchu_Debug.mDebug("renderItemsHead 6 ");					}				}			}			*/			GL11.glPushMatrix();			headMountLoadMatrix();			HeadMount.renderItemsHead(this, entityCaps);//			Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, Modchu_Reflect.loadClass("ItemStack"), float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, itemstack, scale, addSupport });			GL11.glPopMatrix();			//Modchu_Debug.mDebug("headMountRenderItems end");		}	}	public int addSupportChecks(IModelCaps entityCaps, Object itemstack) {		return addSupportChecks(entityCaps, itemstack, 0);	}		public int addSupportChecks(IModelCaps entityCaps, Object itemstack, int type) {		if (itemstack instanceof ItemStack) {			ItemStack stack = (ItemStack) itemstack;			Item item = stack.getItem();			if (item instanceof ItemSkull) {				return 3;			}			Block b = Block.getBlockFromItem(item);			if (b == Blocks.pumpkin) {				return 4;			}		}		return -1;	}	public ModelRenderer getArms(int i) {		return Arms[i];	}	public ModelRenderer getHeadMount() {		return HeadMount;	}		public void setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}		public void changeColor(IModelCaps entityCaps) {	}		public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	@Override	public float getyOffset(IModelCaps pEntityCaps) {		return 1.62F;	}	public float getRidingHeight(IModelCaps entityCaps) {		return getHeight(entityCaps);	}	public float getRidingWidth(IModelCaps entityCaps) {		return getWidth(entityCaps);	}	public float getRidingYOffset(IModelCaps entityCaps) {		return getyOffset(entityCaps);	}		@Override	public float getMountedYOffset(IModelCaps entityCaps) {		return 0.75F;	}		public double getSittingYOffset(IModelCaps entityCaps) {		return -0.35D;	}		public float ridingViewCorrection(IModelCaps entityCaps) {		return 0.0F;	}		public float getModelScale(IModelCaps entityCaps) {		return 0.9375F;	}	private int getMaidColor(IModelCaps entityCaps) {		Object entityliving = ModelCapsHelper.getCapsValue(entityCaps, IModelCaps.caps_Entity);		if (entityliving instanceof EntityLittleMaid) {			return ((EntityLittleMaid)entityliving).getColor();		}		return 0;	}	private void setModchuRemodelingModel(boolean b) {		ModelConfig.modchuRemodelingModel = b;	}	public ModelRenderer getBipedHead(IModelCaps entityCaps) {		return bipedHead;	}	public Object getRightArm(IModelCaps entityCaps) {		return getBipedRightArm(entityCaps);	}	@Override	public Object getCapsValue(int pIndex, Object... pArg) {		if (pIndex == caps_armorType) {			return getArmorType();		}		return super.getCapsValue(pIndex, pArg);	}	private int getArmorType() {		float[] f = getArmorModelsSize();		//Modchu_Debug.mlDebug("getArmorType() modelSize="+modelSize+" "+this);		//Modchu_Debug.mlDebug("getArmorType() modelSize="+modelSize+" f[0]="+f[0]+" f[1]="+f[1]);		return modelSize == f[0] ? 1 : modelSize == f[1] ? 2 : 0;	}	public ModelRenderer getDominantArm(IModelCaps entityCaps) {//		if (ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedRightArm;		return bipedLeftArm;	}	public ModelRenderer getBipedRightArm(IModelCaps entityCaps) {		return bipedRightArm;	}	public ModelRenderer getBipedLeftArm(IModelCaps entityCaps) {		return bipedLeftArm;	}	public ModelRenderer getBipedRightLeg(IModelCaps entityCaps) {		return bipedRightLeg;	}	public ModelRenderer getBipedLeftLeg(IModelCaps entityCaps) {		return bipedLeftLeg;	}	public ModelRenderer getNotDominantArm(IModelCaps entityCaps) {//		if (ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedLeftArm;		return bipedRightArm;	}	@Override	public void renderFirstPersonHand(IModelCaps entityCaps/*, int i*/) {		if (entityCaps != null) {			ModelRenderer ModelRenderer = /*i == 0 ? */getDominantArm(entityCaps)/* : getNotDominantArm(entityCaps)*/;			if (ModelRenderer != null) ModelRenderer.render(0.0625F);		}	}	public boolean armSwingFlag(IModelCaps entityCaps) {		return (onGrounds[0] > -9990F				| onGrounds[1] > -9990F)				&& !ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow)//				&& !ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)//				&& (!isGulliver()//						| (isGulliver()//								&& !ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "isGliding")))								;	}		public void setModelAttributes(Object model) {	}			public void setLivingAnimationsAfter(IModelCaps entityCaps, float f, float f1, float f2) {		if (bipedHead != null				&& entityCaps != null) {			float angle = ModelCapsHelper.getCapsValueFloat(this, entityCaps, caps_interestedAngle, f2);			bipedHead.rotateAngleZ = angle;		}	}	public void setArmorBipedBodyShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedBody, b);	}	public void setArmorBipedRightArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightArm, b);	}	public void setArmorBipedLeftArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftArm, b);	}	public void setArmorBipedRightLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightLeg, b);	}	public void setArmorBipedLeftLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftLeg, b);	}	public void setArmorSkirtShowModel(IModelCaps entityCaps, boolean b) {	}	public void setArmorBipedHeadShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedHead, b);		setCapsValue(entityCaps, caps_visible, bipedHeadwear, b);	}}
+package littleMaidMobX.model.modchu;import littleMaidMobX.Helper;import littleMaidMobX.LittleMaidMobX;import littleMaidMobX.config.ModelConfig;import littleMaidMobX.entity.EntityLittleMaid;import littleMaidMobX.model.ModelMultiBase;import littleMaidMobX.model.caps.IModelCaps;import littleMaidMobX.model.caps.ModelCapsHelper;import littleMaidMobX.model.maids.MultiModel_NM;import littleMaidMobX.render.model.ModelRenderer;import net.minecraft.block.Block;import net.minecraft.client.Minecraft;import net.minecraft.init.Blocks;import net.minecraft.inventory.IInventory;import net.minecraft.item.Item;import net.minecraft.item.ItemSkull;import net.minecraft.item.ItemStack;import org.lwjgl.opengl.GL11;public abstract class ModelModchuBaseBiped extends ModelMultiBase {	public ModelRenderer bipedHead;	public ModelRenderer bipedHeadwear;	public ModelRenderer bipedBody;	public ModelRenderer bipedRightArm;	public ModelRenderer bipedLeftArm;	public ModelRenderer bipedRightLeg;	public ModelRenderer bipedLeftLeg;	public ModelRenderer bipedEars;	public ModelRenderer bipedCloak;	public float modelSize;		public ModelModchuBaseBiped() {		this(0.0F);	}		public ModelModchuBaseBiped(float psize) {		this(psize, 0.0F);	}		public ModelModchuBaseBiped(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}		public ModelModchuBaseBiped(float psize, float pyoffset, int par3, int par4, Object... o) {		super(psize, pyoffset, par3, par4);		isSneak = false;		aimedBow = false;		textureWidth = par3 < 0 ? 64 : par3;		textureHeight = par4 < 0 ? 32 : par4;		initModel(psize, pyoffset, true);		modelSize = psize;		//Modchu_Debug.mDebug("this="+this+" modelSize="+modelSize);	}	public void afterInit(float f, float f1) {		armsinit(f, f1);		defaultAddChild();	}		public void armsinit(float f, float f1) {	}		public void defaultAddChild() {	}	@Override	public void render(IModelCaps entityCaps, float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, boolean pIsRender) {		setRotationAngles(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);		mainFrame.render(f5, pIsRender);		if (Minecraft.FRAME_NUM % 200 == 0) {			if (this instanceof MultiModel_NM) {				MultiModel_NM nm = (MultiModel_NM) this;								for (int i = 0; i < nm.boxList.size(); i++) {					ModelRenderer r = nm.boxList.get(i);					String name = "null";					if (r.boxName != null)						name = r.boxName;					System.out.println(String.format("%-4s", ""+i)+String.format("%-20s", name)+String.format("%20s", ""+(r.showModel&&!r.isHidden)));				}			}		}	}	@Override	public void setLivingAnimations(IModelCaps entityCaps, float f, float f1, float f2) {//		entityCaps.setCapsValue(caps_setLivingAnimationsBefore, this, f, f1, f2);		setLivingAnimationsLM(entityCaps, f, f1, f2);//		if (entityCaps instanceof IModelCaps//				&& ModelCapsHelper.getCapsValueByte(this, entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM) {			setLivingAnimationsAfter(entityCaps, f, f1, f2);//		} else {//			entityCaps.setCapsValue(caps_setLivingAnimationsAfter, this, f, f1, f2);//		}	}	public void setLivingAnimationsLM(IModelCaps entityCaps, float f, float f1, float f2) {	}	@Override	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {		if (entityCaps != null); else {			if (LittleMaidMobX.isDebugModels)			LittleMaidMobX.DebugModel("setRotationAngles entityCaps == null !! this="+this);			//return;		}//		if (entityCaps != null) entityCaps.setCapsValue(caps_setRotationAnglesBefore, this, f, f1, f2, f3, f4, f5);		setRotationAnglesLM(f, f1, f2, f3, f4, f5, entityCaps);//		if (entityCaps != null) entityCaps.setCapsValue(caps_setRotationAnglesAfter, this, f, f1, f2, f3, f4, f5);	}	public void setRotationAnglesLM(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	@Override	public void renderItems(IModelCaps entityCaps) {		if (entityCaps != null) {			renderItemsLM(entityCaps);		}	}	public void renderItemsLM(IModelCaps entityCaps) {				GL11.glPushMatrix();		// R		Arms[0].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[0].renderItems(this, entityCaps, false, 0);		// L		Arms[1].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[1].renderItems(this, entityCaps, false, 1);		renderItemsHead(entityCaps);		renderItemsArmorHead(entityCaps);		GL11.glPopMatrix();	}	public void renderItemsHead(IModelCaps entityCaps) {				if (entityCaps != null); else return;		Object itemstack = entityCaps.getCapsValue(caps_HeadMount, 9);		boolean isPlanter = ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isPlanter, itemstack);		boolean isCamouflage = ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_isCamouflage, itemstack);		int addSupport = addSupportChecks(entityCaps, itemstack);		//Modchu_Debug.mDebug("renderItemsHead itemstack="+itemstack);		//Modchu_Debug.mDebug("renderItemsHead isPlanter="+isPlanter);		//Modchu_Debug.mDebug("renderItemsHead isCamouflage="+isCamouflage);		//Modchu_Debug.mDebug("renderItemsHead addSupport="+addSupport);		if (isCamouflage				| isPlanter				| addSupport > -1) {//			float scale = 1.0F;			Object inventory = entityCaps.getCapsValue(caps_Inventory);			//Modchu_Debug.mDebug("renderItemsHead 2 inventory="+inventory);			if (inventory instanceof IInventory) {				/*Object pEntity = entityCaps.getCapsValue(caps_Entity);				int slot = pEntity instanceof EntityPlayer ? 10 : 16;				ItemStack itemstack1 = ((IInventory) inventory).getStackInSlot(slot);				//Modchu_Debug.mDebug("renderItemsHead 3 itemstack1="+itemstack1);				if (itemstack1 != null) {					Item item2 = itemstack1.getItem();					//Modchu_Debug.mDebug("renderItemsHead 4 item2="+item2);					//Modchu_Debug.mDebug("renderItemsHead 5 dyePowder="+dyePowder);					if (item2 == Items.dye) {						scale = 1.0F + (0.2F * itemstack1.getItemDamage());						//Modchu_Debug.mDebug("renderItemsHead 6 ");					}				}*/				//Modchu_Debug.mDebug("renderItemsHead addSupport="+addSupport);				if (isPlanter						| (addSupport > -1								&& addSupport < 3)) {					headTopLoadMatrix();					//TODO: implement new item render code in ModelRenderer. 					// tho i'm not sure what it does besides scaling and 1.8 support										HeadTop.renderItemsHead(this, entityCaps);//					HeadTop.renderItemsHead(this, entityCaps, scale, addSupport);//					Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, float.class, int.class }, HeadTop, new Object[]{ this, entityCaps, scale, addSupport });					//HeadTop.loadMatrix().renderItemsHead(this, entityCaps);				} else {					headMountLoadMatrix();					HeadMount.renderItemsHead(this, entityCaps);//					Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, scale, addSupport });					//HeadMount.loadMatrix().renderItemsHead(this, entityCaps);				}			}		}	}	public void headMountLoadMatrix() {		HeadMount.loadMatrix();	}	public void headTopLoadMatrix() {		HeadTop.loadMatrix();	}	public void renderItemsArmorHead(IModelCaps entityCaps) {				//Modchu_Debug.mDebug("renderItemsArmorHead");		Object itemstack = ModelCapsHelper.getCapsValue(entityCaps, caps_currentArmor, new Object[]{ 3 });		if (itemstack != null) {			//Modchu_Debug.mDebug("renderItemsArmorHead 1");			int addSupport = addSupportChecks(entityCaps, itemstack, 1);			headMountRenderItems(entityCaps, itemstack, addSupport);		}	}	public void headMountRenderItems(IModelCaps entityCaps, Object itemstack, int addSupport) {		Object pEntity = ModelCapsHelper.getCapsValue(entityCaps, IModelCaps.caps_Entity);		if (Helper.isCamouflage(itemstack) || Helper.isPlanter(itemstack) || addSupport > -1) {			//Modchu_Debug.mDebug("headMountRenderItems 1");			/*Object inventory = entityCaps.getCapsValue(caps_Inventory);			//Modchu_Debug.mDebug("renderItemsHead 2 inventory="+inventory);			float scale = 1.0F;			if (inventory instanceof IInventory) {				int slot = pEntity instanceof EntityPlayer ? 10 : 16;				ItemStack itemstack1 = ((IInventory) inventory).getStackInSlot(slot);				//Modchu_Debug.mDebug("renderItemsHead 3 itemstack1="+itemstack1);				if (itemstack1 != null) {					Item item2 = itemstack1.getItem();					//Modchu_Debug.mDebug("renderItemsHead 4 item2="+item2);					//Modchu_Debug.mDebug("renderItemsHead 5 dyePowder="+dyePowder);					if (item2 == Items.dye) {						scale = 1.0F + (0.2F * itemstack1.getItemDamage());						//Modchu_Debug.mDebug("renderItemsHead 6 ");					}				}			}			*/			GL11.glPushMatrix();			headMountLoadMatrix();			HeadMount.renderItemsHead(this, entityCaps);//			Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, Modchu_Reflect.loadClass("ItemStack"), float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, itemstack, scale, addSupport });			GL11.glPopMatrix();			//Modchu_Debug.mDebug("headMountRenderItems end");		}	}	public int addSupportChecks(IModelCaps entityCaps, Object itemstack) {		return addSupportChecks(entityCaps, itemstack, 0);	}		public int addSupportChecks(IModelCaps entityCaps, Object itemstack, int type) {		if (itemstack instanceof ItemStack) {			ItemStack stack = (ItemStack) itemstack;			Item item = stack.getItem();			if (item instanceof ItemSkull) {				return 3;			}			Block b = Block.getBlockFromItem(item);			if (b == Blocks.pumpkin) {				return 4;			}		}		return -1;	}	public ModelRenderer getArms(int i) {		return Arms[i];	}	public ModelRenderer getHeadMount() {		return HeadMount;	}		public void setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}		public void changeColor(IModelCaps entityCaps) {	}		public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	@Override	public float getyOffset(IModelCaps pEntityCaps) {		return 1.62F;	}	public float getRidingHeight(IModelCaps entityCaps) {		return getHeight(entityCaps);	}	public float getRidingWidth(IModelCaps entityCaps) {		return getWidth(entityCaps);	}	public float getRidingYOffset(IModelCaps entityCaps) {		return getyOffset(entityCaps);	}		@Override	public float getMountedYOffset(IModelCaps entityCaps) {		return 0.75F;	}		public double getSittingYOffset(IModelCaps entityCaps) {		return -0.35D;	}		public float ridingViewCorrection(IModelCaps entityCaps) {		return 0.0F;	}		public float getModelScale(IModelCaps entityCaps) {		return 0.9375F;	}	private int getMaidColor(IModelCaps entityCaps) {		Object entityliving = ModelCapsHelper.getCapsValue(entityCaps, IModelCaps.caps_Entity);		if (entityliving instanceof EntityLittleMaid) {			return ((EntityLittleMaid)entityliving).getColor();		}		return 0;	}	private void setModchuRemodelingModel(boolean b) {		ModelConfig.modchuRemodelingModel = b;	}	public ModelRenderer getBipedHead(IModelCaps entityCaps) {		return bipedHead;	}	public Object getRightArm(IModelCaps entityCaps) {		return getBipedRightArm(entityCaps);	}	@Override	public Object getCapsValue(int pIndex, Object... pArg) {		if (pIndex == caps_armorType) {			return getArmorType();		}		return super.getCapsValue(pIndex, pArg);	}	private int getArmorType() {		float[] f = getArmorModelsSize();		//Modchu_Debug.mlDebug("getArmorType() modelSize="+modelSize+" "+this);		//Modchu_Debug.mlDebug("getArmorType() modelSize="+modelSize+" f[0]="+f[0]+" f[1]="+f[1]);		return modelSize == f[0] ? 1 : modelSize == f[1] ? 2 : 0;	}	public ModelRenderer getDominantArm(IModelCaps entityCaps) {//		if (ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedRightArm;		return bipedLeftArm;	}	public ModelRenderer getBipedRightArm(IModelCaps entityCaps) {		return bipedRightArm;	}	public ModelRenderer getBipedLeftArm(IModelCaps entityCaps) {		return bipedLeftArm;	}	public ModelRenderer getBipedRightLeg(IModelCaps entityCaps) {		return bipedRightLeg;	}	public ModelRenderer getBipedLeftLeg(IModelCaps entityCaps) {		return bipedLeftLeg;	}	public ModelRenderer getNotDominantArm(IModelCaps entityCaps) {//		if (ModelCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedLeftArm;		return bipedRightArm;	}	@Override	public void renderFirstPersonHand(IModelCaps entityCaps/*, int i*/) {		if (entityCaps != null) {			ModelRenderer ModelRenderer = /*i == 0 ? */getDominantArm(entityCaps)/* : getNotDominantArm(entityCaps)*/;			if (ModelRenderer != null) ModelRenderer.render(0.0625F);		}	}	public boolean armSwingFlag(IModelCaps entityCaps) {		return (onGrounds[0] > -9990F				| onGrounds[1] > -9990F)				&& !ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow)//				&& !ModelCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)//				&& (!isGulliver()//						| (isGulliver()//								&& !ModelCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "isGliding")))								;	}		public void setModelAttributes(Object model) {	}			public void setLivingAnimationsAfter(IModelCaps entityCaps, float f, float f1, float f2) {		if (bipedHead != null				&& entityCaps != null) {			float angle = ModelCapsHelper.getCapsValueFloat(this, entityCaps, caps_interestedAngle, f2);			bipedHead.rotateAngleZ = angle;		}	}	public void setArmorBipedBodyShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedBody, b);	}	public void setArmorBipedRightArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightArm, b);	}	public void setArmorBipedLeftArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftArm, b);	}	public void setArmorBipedRightLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightLeg, b);	}	public void setArmorBipedLeftLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftLeg, b);	}	public void setArmorSkirtShowModel(IModelCaps entityCaps, boolean b) {	}	public void setArmorBipedHeadShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedHead, b);		setCapsValue(entityCaps, caps_visible, bipedHeadwear, b);	}}
diff --git a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseMulti.java b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseMulti.java
index 14b6f6b..d78f8e2 100755
--- a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseMulti.java
+++ b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseMulti.java
@@ -19,44 +19,44 @@ package littleMaidMobX.model.modchu;import littleMaidMobX.Helper;import littl
 		super(f, f1, i < 0 ? 64 : i, j < 0 ? 32 : j);
 	}	@Override
 	public void initModel(float f, float f1, boolean isAfterInit) {
-		bipedCloak = new ModelRenderer(this);
-		bipedEars = new ModelRenderer(this);
-		bipedHead = new ModelRenderer(this, 0, 0);
+		bipedCloak = new ModelRenderer(this, "bipedCloak");
+		bipedEars = new ModelRenderer(this, "bipedEars");
+		bipedHead = new ModelRenderer(this, 0, 0, "bipedHead");
 		bipedHead.addBox(-4.0F, -8.0F, -4.0F, 8, 8, 8, f);
-		bipedHeadwear = new ModelRenderer(this, 24, 0);
+		bipedHeadwear = new ModelRenderer(this, 24, 0, "bipedHeadwear");
 		bipedHeadwear.addBox(-4.0F, 0.0F, 1.0F, 8, 4, 3, f);
-		bipedBody = new ModelRenderer(this, 32, 8);
+		bipedBody = new ModelRenderer(this, 32, 8, "bipedBody");
 		bipedBody.addBox(-3.0F, -3.5F, -2.0F, 6, 7, 4, f);
-		bipedRightArm = new ModelRenderer(this, 48, 0);
+		bipedRightArm = new ModelRenderer(this, 48, 0, "bipedRightArm");
 		bipedRightArm.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, f);
-		bipedLeftArm = new ModelRenderer(this, 56, 0);
+		bipedLeftArm = new ModelRenderer(this, 56, 0, "bipedLeftArm");
 		bipedLeftArm.addBox(-1.0F, 0.0F, -1.0F, 2, 8, 2, f);
-		bipedRightLeg = new ModelRenderer(this, 32, 19);
+		bipedRightLeg = new ModelRenderer(this, 32, 19, "bipedRightLeg");
 		bipedRightLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 9, 4, f);
-		bipedLeftLeg = new ModelRenderer(this, 32, 19);
+		bipedLeftLeg = new ModelRenderer(this, 32, 19, "bipedLeftLeg");
 		bipedLeftLeg.mirror = true;
 		bipedLeftLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 9, 4, f);
 		Skirt = new ModelRenderer(this, 0, 16, "Skirt");
 		Skirt.addBox(-4F, -4F, -4F, 8, 8, 8, f);
-		ChignonR = new ModelRenderer(this, 24, 18);
+		ChignonR = new ModelRenderer(this, 24, 18, "ChignonR");
 		ChignonR.addBox(-5F, -7F, 0.2F, 1, 3, 3, f);
 		ChignonR.setRotationPoint(0.0F, -1.5F, 0.0F);
-		ChignonL = new ModelRenderer(this, 24, 18);
+		ChignonL = new ModelRenderer(this, 24, 18, "ChignonL");
 		ChignonL.addBox(4F, -7F, 0.2F, 1, 3, 3, f);
 		ChignonL.setRotationPoint(0.0F, -1.5F, 0.0F);
-		ChignonB = new ModelRenderer(this, 52, 10);
+		ChignonB = new ModelRenderer(this, 52, 10, "ChignonB");
 		ChignonB.addBox(-2F, -7.2F, 4F, 4, 4, 2, f);
 		ChignonB.setRotationPoint(0.0F, -1.5F, 0.0F);
-		Tail = new ModelRenderer(this, 46, 20);
+		Tail = new ModelRenderer(this, 46, 20, "Tail");
 		Tail.addBox(-1.5F, -6.8F, 4F, 3, 9, 3, f);
 		Tail.setRotationPoint(0.0F, 0.0F, 0.0F);
-		SideTailR = new ModelRenderer(this, 58, 21);
+		SideTailR = new ModelRenderer(this, 58, 21, "SideTailR");
 		SideTailR.addBox(-5.5F, -6.8F, 0.9F, 1, 8, 2, f);
 		SideTailR.setRotationPoint(0.0F, 0.0F, 0.0F);
-		SideTailL = new ModelRenderer(this, 58, 21);
+		SideTailL = new ModelRenderer(this, 58, 21, "SideTailL");
 		SideTailL.mirror = true;
 		SideTailL.addBox(4.5F, -6.8F, 0.9F, 1, 8, 2, f);
-		SideTailL.setRotationPoint(0.0F, 0.0F, 0.0F);		mainFrame = new ModelRenderer(this);
+		SideTailL.setRotationPoint(0.0F, 0.0F, 0.0F);		mainFrame = new ModelRenderer(this, "mainFrame");
 		mainFrame.setRotationPoint(0F, 8F, 0F);		if (isAfterInit) afterInit(f, f1);
 	}	@Override
 	public void armsinit(float f, float f1) {
@@ -74,45 +74,45 @@ package littleMaidMobX.model.modchu;import littleMaidMobX.Helper;import littl
 	public void actionPartsInit(float f, float f1) {
 		rightArm = new ModelRenderer(this, 48, 0, "rightArm");
 		rightArm.addBox(-1.0F, 0.0F, -1.0F, 2, 4, 2, f);
-		rightArm.setRotationPoint(-3.0F, 9.5F, 0.0F);		rightArmPlus = new ModelRenderer(this);
+		rightArm.setRotationPoint(-3.0F, 9.5F, 0.0F);		rightArmPlus = new ModelRenderer(this, "rightArmPlus");
 		//rightArmPlus.setTextureOffset(52, 0.addPlate(-1.0F, -1.0F, -3.01F, 2, 2, 4, f);
-		rightArmPlus.rotateAngleX = 1.570796313F;		rightArm2 = new ModelRenderer(this, 48, 3);
+		rightArmPlus.rotateAngleX = 1.570796313F;		rightArm2 = new ModelRenderer(this, 48, 3, "rightArm2");
 		rightArm2.addBox(-1.0F, 0.0F, -1.0F, 2, 2, 2, f);
-		rightArm2.setRotationPoint(0.0F, 2.0F, 0.0F);		rightArmPlus2 = new ModelRenderer(this);
+		rightArm2.setRotationPoint(0.0F, 2.0F, 0.0F);		rightArmPlus2 = new ModelRenderer(this, "rightArmPlus2");
 		rightArmPlus2.setTextureOffset(52, 0).addPlate(-1.0F, -1.0F, 0.001F, 2, 2, 4, f);
 		rightArmPlus2.setTextureOffset(52, 0).addPlate(-1.0F, -1.0F, -2.001F, 2, 2, 0, f);
 		rightArmPlus2.rotateAngleX = 1.570796313F;		rightHand = new ModelRenderer(this, 48, 6, "rightHand");
 		rightHand.addBox(-1.0F, -1.0F, -1.0F, 2, 2, 2, f);
-		rightHand.setRotationPoint(0.0F, 3.0F, 0.0F);		leftArm = new ModelRenderer(this, 56, 0);
+		rightHand.setRotationPoint(0.0F, 3.0F, 0.0F);		leftArm = new ModelRenderer(this, 56, 0, "leftArm");
 		leftArm.addBox(-1.0F, 0.0F, -1.0F, 2, 4, 2, f);
-		leftArm.setRotationPoint(3.0F, 9.5F, 0.0F);		leftArmPlus = new ModelRenderer(this);
+		leftArm.setRotationPoint(3.0F, 9.5F, 0.0F);		leftArmPlus = new ModelRenderer(this, "leftArmPlus");
 		//leftArmPlus.setTextureOffset(60, 0.addPlate(-1.0F, -1.0F, -3.01F, 2, 2, 4, f);
-		leftArmPlus.rotateAngleX = 1.570796313F;		leftArm2 = new ModelRenderer(this, 56, 3);
+		leftArmPlus.rotateAngleX = 1.570796313F;		leftArm2 = new ModelRenderer(this, 56, 3, "leftArm2");
 		leftArm2.addBox(-1.0F, 0.0F, -1.0F, 2, 2, 2, f);
-		leftArm2.setRotationPoint(0.0F, 2.0F, 0.0F);		leftArmPlus2 = new ModelRenderer(this);
+		leftArm2.setRotationPoint(0.0F, 2.0F, 0.0F);		leftArmPlus2 = new ModelRenderer(this, "leftArmPlus2");
 		leftArmPlus2.setTextureOffset(60, 0).addPlate(-1.0F, -1.0F, 0.001F, 2, 2, 4, f);
 		leftArmPlus2.setTextureOffset(60, 0).addPlate(-1.0F, -1.0F, -2.001F, 2, 2, 0, f);
-		leftArmPlus2.rotateAngleX = 1.570796313F;		leftHand = new ModelRenderer(this, 56, 6);
+		leftArmPlus2.rotateAngleX = 1.570796313F;		leftHand = new ModelRenderer(this, 56, 6, "leftHand");
 		leftHand.addBox(-1.0F, -1.0F, -1.0F, 2, 2, 2, f);
-		leftHand.setRotationPoint(0.0F, 3.0F, 0.0F);		rightLeg = new ModelRenderer(this, 32, 19);
+		leftHand.setRotationPoint(0.0F, 3.0F, 0.0F);		rightLeg = new ModelRenderer(this, 32, 19, "rightLeg");
 		rightLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 4, 4, f);
-		rightLeg.setRotationPoint(0.0F, 8.0F, 0.0F);		rightLegPlus = new ModelRenderer(this);
+		rightLeg.setRotationPoint(0.0F, 8.0F, 0.0F);		rightLegPlus = new ModelRenderer(this, "rightLegPlus");
 		rightLegPlus.setTextureOffset(36, 19).addPlate(-1.5F, -2.0F, -4.01F, 3, 4, 4, f);
-		rightLegPlus.rotateAngleX = 1.570796313F;		rightLeg2 = new ModelRenderer(this, 32, 23);
+		rightLegPlus.rotateAngleX = 1.570796313F;		rightLeg2 = new ModelRenderer(this, 32, 23, "rightLeg2");
 		rightLeg2.addBox(-1.5F, 0.0F, -2.0F, 3, 5, 4, f);
-		rightLeg2.setRotationPoint(0.0F, 8.0F, 0.0F);		rightLegPlus2 = new ModelRenderer(this);
+		rightLeg2.setRotationPoint(0.0F, 8.0F, 0.0F);		rightLegPlus2 = new ModelRenderer(this, "rightLegPlus2");
 		rightLegPlus2.setTextureOffset(36, 19).addPlate(-1.5F, -2.0F, 0.01F, 3, 4, 4, f);
 		rightLegPlus2.setTextureOffset(39, 19).addPlate(-1.5F, -2.0F, -5.01F, 3, 4, 4, f);
-		rightLegPlus2.rotateAngleX = 1.570796313F;		leftLeg = new ModelRenderer(this, 32, 19);
+		rightLegPlus2.rotateAngleX = 1.570796313F;		leftLeg = new ModelRenderer(this, 32, 19, "leftLeg");
 		leftLeg.mirror = true;
 		leftLeg.addBox(-1.5F, 0.0F, -2.0F, 3, 4, 4, f);
-		leftLeg.setRotationPoint(0.0F, 8.0F, 0.0F);		leftLegPlus = new ModelRenderer(this);
+		leftLeg.setRotationPoint(0.0F, 8.0F, 0.0F);		leftLegPlus = new ModelRenderer(this, "leftLegPlus");
 		leftLegPlus.mirror = true;
 		leftLegPlus.setTextureOffset(36, 19).addPlate(-1.5F, -2.0F, -4.01F, 3, 4, 4, f);
-		leftLegPlus.rotateAngleX = 1.570796313F;		leftLeg2 = new ModelRenderer(this, 32, 23);
+		leftLegPlus.rotateAngleX = 1.570796313F;		leftLeg2 = new ModelRenderer(this, 32, 23, "leftLeg2");
 		leftLeg2.mirror = true;
 		leftLeg2.addBox(-1.5F, 0.0F, -2.0F, 3, 5, 4, f);
-		leftLeg2.setRotationPoint(0.0F, 8.0F, 0.0F);		leftLegPlus2 = new ModelRenderer(this);
+		leftLeg2.setRotationPoint(0.0F, 8.0F, 0.0F);		leftLegPlus2 = new ModelRenderer(this, "leftLegPlus2");
 		leftLegPlus2.mirror = true;
 		leftLegPlus2.setTextureOffset(36, 19).addPlate(-1.5F, -2.0F, 0.01F, 3, 4, 4, f);
 		leftLegPlus2.setTextureOffset(39, 19).addPlate(-1.5F, -2.0F, -5.01F, 3, 4, 4, f);
diff --git a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseSR2.java b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseSR2.java
index 990cc33..e94973c 100755
--- a/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseSR2.java
+++ b/src/main/java/littleMaidMobX/model/modchu/ModelModchuBaseSR2.java
@@ -29,10 +29,10 @@ public class ModelModchuBaseSR2 extends ModelModchuBaseMulti {
 		super.initModel(psize, pyoffset, isAfterInit);
 		
 		
-		eyeR = new ModelRenderer(this, 32, 19);
+		eyeR = new ModelRenderer(this, 32, 19, "eyeR");
 		eyeR.addPlate(-4.0F, -5.0F, -4.001F, 4, 4, 0, psize);
 		eyeR.setRotationPoint(0.0F, 0.0F, 0.0F);
-		eyeL = new ModelRenderer(this, 42, 19);
+		eyeL = new ModelRenderer(this, 42, 19, "eyeL");
 		eyeL.addPlate(0.0F, -5.0F, -4.001F, 4, 4, 0, psize);
 		eyeL.setRotationPoint(0.0F, 0.0F, 0.0F);
 		bipedHead.addChild(eyeR);
diff --git a/src/main/java/littleMaidMobX/registry/ModelRegistry.java b/src/main/java/littleMaidMobX/registry/ModelRegistry.java
index 9075eb8..91d7125 100755
--- a/src/main/java/littleMaidMobX/registry/ModelRegistry.java
+++ b/src/main/java/littleMaidMobX/registry/ModelRegistry.java
@@ -7,68 +7,68 @@ import littleMaidMobX.model.maids.*;
 public class ModelRegistry {
 	public static final HashSet<Class> list = new HashSet<Class>();
 	static {
-		list.add(ModelLittleMaid_AC.class);
-		list.add(ModelLittleMaid_Archetype.class);
-		list.add(ModelLittleMaid_Aug.class);
-		list.add(ModelLittleMaid_Beverly7.class);
-		list.add(ModelLittleMaid_Chloe2.class);
-		list.add(ModelLittleMaid_Elsa5.class);
-		list.add(ModelLittleMaid_Orign.class);
-		list.add(ModelLittleMaid_RX0.class);
-		list.add(ModelLittleMaid_SR2.class);
-		list.add(ModelMulti_Stef.class);
-		list.add(ModelMulti_Steve.class);
-		list.add(MultiModel_Angel.class);
-		list.add(MultiModel_Aokise.class);
-		list.add(MultiModel_Beverly2.class);
-		list.add(MultiModel_Beverly3.class);
-		list.add(MultiModel_Beverly4.class);
-		list.add(MultiModel_Beverly5.class);
-		list.add(MultiModel_Beverly6.class);
-		list.add(MultiModel_bgs.class);
-		list.add(MultiModel_brs.class);
-		list.add(MultiModel_ch.class);
-		list.add(MultiModel_ChibiNeko.class);
-		list.add(MultiModel_chrno.class);
-		list.add(MultiModel_chu.class);
-		list.add(MultiModel_dm.class);
-		list.add(MultiModel_DogAngel.class);
-		list.add(MultiModel_DogAngel2.class);
-		list.add(MultiModel_DressYukari.class);
-		list.add(MultiModel_Elsa.class);
-		list.add(MultiModel_Elsa2.class);
-		list.add(MultiModel_Elsa3.class);
-		list.add(MultiModel_Elsa4.class);
-		list.add(MultiModel_Elsie.class);
-		list.add(MultiModel_Evelyn3.class);
-		list.add(MultiModel_ExtraArms.class);
-		list.add(MultiModel_Kagami.class);
-		list.add(MultiModel_Kelo.class);
-		list.add(MultiModel_long.class);
-		list.add(MultiModel_Mabel.class);
-		list.add(MultiModel_mahoro.class);
-		list.add(MultiModel_MS.class);
-		list.add(MultiModel_MS1.class);
-		list.add(MultiModel_naz.class);
+//		list.add(ModelLittleMaid_AC.class);
+//		list.add(ModelLittleMaid_Archetype.class);
+//		list.add(ModelLittleMaid_Aug.class);
+//		list.add(ModelLittleMaid_Beverly7.class);
+//		list.add(ModelLittleMaid_Chloe2.class);
+//		list.add(ModelLittleMaid_Elsa5.class);
+//		list.add(ModelLittleMaid_Orign.class);
+//		list.add(ModelLittleMaid_RX0.class);
+//		list.add(ModelLittleMaid_SR2.class);
+//		list.add(ModelMulti_Stef.class);
+//		list.add(ModelMulti_Steve.class);
+//		list.add(MultiModel_Angel.class);
+//		list.add(MultiModel_Aokise.class);
+//		list.add(MultiModel_Beverly2.class);
+//		list.add(MultiModel_Beverly3.class);
+//		list.add(MultiModel_Beverly4.class);
+//		list.add(MultiModel_Beverly5.class);
+//		list.add(MultiModel_Beverly6.class);
+//		list.add(MultiModel_bgs.class);
+//		list.add(MultiModel_brs.class);
+//		list.add(MultiModel_ch.class);
+//		list.add(MultiModel_ChibiNeko.class);
+//		list.add(MultiModel_chrno.class);
+//		list.add(MultiModel_chu.class);
+//		list.add(MultiModel_dm.class);
+//		list.add(MultiModel_DogAngel.class);
+//		list.add(MultiModel_DogAngel2.class);
+//		list.add(MultiModel_DressYukari.class);
+//		list.add(MultiModel_Elsa.class);
+//		list.add(MultiModel_Elsa2.class);
+//		list.add(MultiModel_Elsa3.class);
+//		list.add(MultiModel_Elsa4.class);
+//		list.add(MultiModel_Elsie.class);
+//		list.add(MultiModel_Evelyn3.class);
+//		list.add(MultiModel_ExtraArms.class);
+//		list.add(MultiModel_Kagami.class);
+//		list.add(MultiModel_Kelo.class);
+//		list.add(MultiModel_long.class);
+//		list.add(MultiModel_Mabel.class);
+//		list.add(MultiModel_mahoro.class);
+//		list.add(MultiModel_MS.class);
+//		list.add(MultiModel_MS1.class);
+//		list.add(MultiModel_naz.class);
 		list.add(MultiModel_NM.class);
-		list.add(MultiModel_NM1.class);
-		list.add(MultiModel_Pawapro.class);
-		list.add(MultiModel_Petit.class);
-		list.add(MultiModel_QB.class);
-		list.add(MultiModel_SA.class);
-		list.add(MultiModel_Shion.class);
-		list.add(MultiModel_st.class);
-		list.add(MultiModel_suika.class);
-		list.add(MultiModel_taremimi.class);
-		list.add(MultiModel_tareusa.class);
-		list.add(MultiModel_Tenshi.class);
-		list.add(MultiModel_twinD.class);
-		list.add(MultiModel_usagi.class);
-		list.add(MultiModel_Utsuho.class);
-		list.add(MultiModel_VUD1.class);
-		list.add(MultiModel_Yomu.class);
-		list.add(MultiModel_Yukari.class);
-		list.add(MultiModel_Yukkuri.class);
+//		list.add(MultiModel_NM1.class);
+//		list.add(MultiModel_Pawapro.class);
+//		list.add(MultiModel_Petit.class);
+//		list.add(MultiModel_QB.class);
+//		list.add(MultiModel_SA.class);
+//		list.add(MultiModel_Shion.class);
+//		list.add(MultiModel_st.class);
+//		list.add(MultiModel_suika.class);
+//		list.add(MultiModel_taremimi.class);
+//		list.add(MultiModel_tareusa.class);
+//		list.add(MultiModel_Tenshi.class);
+//		list.add(MultiModel_twinD.class);
+//		list.add(MultiModel_usagi.class);
+//		list.add(MultiModel_Utsuho.class);
+//		list.add(MultiModel_VUD1.class);
+//		list.add(MultiModel_Yomu.class);
+//		list.add(MultiModel_Yukari.class);
+//		list.add(MultiModel_Yukkuri.class);
 	}
 
 }
diff --git a/src/main/java/littleMaidMobX/render/model/ModelRenderer.java b/src/main/java/littleMaidMobX/render/model/ModelRenderer.java
index e05e947..9015b1f 100755
--- a/src/main/java/littleMaidMobX/render/model/ModelRenderer.java
+++ b/src/main/java/littleMaidMobX/render/model/ModelRenderer.java
@@ -115,6 +115,25 @@ public class ModelRenderer {
 		if (pModelBase instanceof MultiModel_NM && pModelBase.modelSize==0) {
 			System.out.println("our: "+pModelBase.boxList.size()+" = "+pName);
 		}
+		if (pName != null && pModelBase.modelSize == 0F) {
+			String s = "";
+			for (int i = 0; i < pModelBase.boxList.size(); i++) {
+				ModelRenderer r = pModelBase.boxList.get(i);
+				if (pName.equals(r.boxName)) {
+					if (s.isEmpty()) {
+						s = "While adding body part "+pName;
+					}
+					s+="\nAlready have body part "+r.boxName+" at index "+i;
+				}
+			}
+			if (!s.isEmpty()) {
+				System.err.println(s);
+				Thread.dumpStack();
+			}
+		}
+//		if (pModelBase instanceof MultiModel_NM && pModelBase.modelSize==0) {
+//			System.out.println("our: "+pModelBase.boxList.size()+" = "+pName);
+//		}
 		
 		pModelBase.boxList.add(this);
 		boxName = pName;
