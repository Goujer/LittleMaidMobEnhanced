package littleMaidMobX.models;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_EntityCapsHelper;import modchu.lib.Modchu_Reflect;import modchu.lib.characteristic.Modchu_AS;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_IEntityCapsBase;import modchu.lib.characteristic.Modchu_ModelRenderer;import modchu.model.ModchuModel_ConfigData;import modchu.model.ModchuModel_IEntityCaps;import net.minecraft.client.Minecraft;import org.lwjgl.opengl.GL11;/** * PlayerFormLittleMaid共通Model 継承必須クラス */public abstract class ModelModchuBaseBiped extends ModelMultiBase {	public ModelRenderer bipedHead;	public ModelRenderer bipedHeadwear;	public ModelRenderer bipedBody;	public ModelRenderer bipedRightArm;	public ModelRenderer bipedLeftArm;	public ModelRenderer bipedRightLeg;	public ModelRenderer bipedLeftLeg;	public ModelRenderer bipedEars;	public ModelRenderer bipedCloak;	public float modelSize;	/**	 * コンストラクタは全て継承させること	 */	public ModelModchuBaseBiped() {		this(0.0F);	}	/**	 * コンストラクタは全て継承させること	 */	public ModelModchuBaseBiped(float psize) {		this(psize, 0.0F);	}	/**	 * コンストラクタは全て継承させること	 */	public ModelModchuBaseBiped(float psize, float pyoffset) {		this(psize, pyoffset, 64, 32);	}	/**	 * コンストラクタは全て継承させること	 */	public ModelModchuBaseBiped(float psize, float pyoffset, int par3, int par4, Object... o) {		super(psize, pyoffset, par3, par4);		isSneak = false;		aimedBow = false;		textureWidth = par3 < 0 ? 64 : par3;		textureHeight = par4 < 0 ? 32 : par4;		initModel(psize, pyoffset, true);		modelSize = psize;		//Modchu_Debug.mDebug("this="+this+" modelSize="+modelSize);	}	public void afterInit(float f, float f1) {		armsinit(f, f1);		defaultAddChild();	}	/**	 * 手持ちアイテム描画用パーツ初期化時に呼ばれる	 */	public void armsinit(float f, float f1) {	}	/**	 * 各パーツのaddChild状態をリセットし、すべて再セットするコードを入れる	 * 何度も呼ばれるのでaddChildのみではなく、clearしてからのaddChildを考慮する事	 */	public void defaultAddChild() {	}	@Override	public void render(IModelCaps entityCaps, float f, float f1, float f2, float pheadYaw, float pheadPitch, float f5, boolean pIsRender) {		setRotationAngles(f, f1, f2, pheadYaw, pheadPitch, f5, entityCaps);		mainFrame.render(f5, pIsRender);		if (Minecraft.FRAME_NUM%100==0) {			System.out.println("evelyn4 "+this.boxList.size()+" boxes");		}	}	@Override	public void setLivingAnimations(IModelCaps entityCaps, float f, float f1, float f2) {//		entityCaps.setCapsValue(caps_setLivingAnimationsBefore, this, f, f1, f2);		setLivingAnimationsLM(entityCaps, f, f1, f2);//		if (entityCaps instanceof IModelCaps//				&& Modchu_EntityCapsHelper.getCapsValueByte(this, entityCaps, entityCaps.caps_EntityType) == entityCaps.entityType_LMM) {			setLivingAnimationsAfter(entityCaps, f, f1, f2);//		} else {//			entityCaps.setCapsValue(caps_setLivingAnimationsAfter, this, f, f1, f2);//		}	}	public void setLivingAnimationsLM(IModelCaps entityCaps, float f, float f1, float f2) {	}	@Override	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {		if (entityCaps != null); else {			Modchu_Debug.mDebug1("setRotationAngles entityCaps == null !! this="+this);			//return;		}//		if (entityCaps != null) entityCaps.setCapsValue(caps_setRotationAnglesBefore, this, f, f1, f2, f3, f4, f5);		setRotationAnglesLM(f, f1, f2, f3, f4, f5, entityCaps);//		if (entityCaps != null) entityCaps.setCapsValue(caps_setRotationAnglesAfter, this, f, f1, f2, f3, f4, f5);	}	public void setRotationAnglesLM(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	@Override	public void renderItems(IModelCaps entityCaps) {		if (entityCaps != null) {			renderItemsLM(entityCaps);		}	}	public void renderItemsLM(IModelCaps entityCaps) {		// 手持ちの表示		GL11.glPushMatrix();		// R		Arms[0].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[0].renderItems(this, entityCaps, false, 0);		// L		Arms[1].loadMatrix();		GL11.glTranslatef(0F, 0.05F, -0.05F);		Arms[1].renderItems(this, entityCaps, false, 1);		renderItemsHead(entityCaps);		renderItemsArmorHead(entityCaps);		GL11.glPopMatrix();	}	public void renderItemsHead(IModelCaps entityCaps) {		// 頭部装飾品の表示		if (entityCaps != null); else return;		Object itemstack = entityCaps.getCapsValue(caps_HeadMount, 9);		boolean isPlanter = Modchu_EntityCapsHelper.getCapsValueBoolean(entityCaps, caps_isPlanter, itemstack);		boolean isCamouflage = Modchu_EntityCapsHelper.getCapsValueBoolean(entityCaps, caps_isCamouflage, itemstack);		int addSupport = addSupportChecks(entityCaps, itemstack);		//Modchu_Debug.mDebug("renderItemsHead itemstack="+itemstack);		//Modchu_Debug.mDebug("renderItemsHead isPlanter="+isPlanter);		//Modchu_Debug.mDebug("renderItemsHead isCamouflage="+isCamouflage);		//Modchu_Debug.mDebug("renderItemsHead addSupport="+addSupport);		if (isCamouflage				| isPlanter				| addSupport > -1) {			float scale = 1.0F;			Object inventory = entityCaps.getCapsValue(caps_Inventory);			//Modchu_Debug.mDebug("renderItemsHead 2 inventory="+inventory);			if (inventory != null) {				Object pEntity = entityCaps.getCapsValue(caps_Entity);				int slot = Modchu_Reflect.loadClass("EntityPlayer").isInstance(pEntity) ? 10 : 16;				Object itemstack1 = Modchu_AS.get(Modchu_AS.inventoryPlayerGetStackInSlot, inventory, slot);				//Modchu_Debug.mDebug("renderItemsHead 3 itemstack1="+itemstack1);				if (itemstack1 != null) {					Object item2 = Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack1);					Object dyePowder = Modchu_AS.get(Modchu_AS.getItem, "dye");					//Modchu_Debug.mDebug("renderItemsHead 4 item2="+item2);					//Modchu_Debug.mDebug("renderItemsHead 5 dyePowder="+dyePowder);					if (item2 == dyePowder) {						scale = 1.0F + (0.2F * Modchu_AS.getFloat(Modchu_AS.itemStackGetItemDamage, itemstack1));						//Modchu_Debug.mDebug("renderItemsHead 6 ");					}				}				//Modchu_Debug.mDebug("renderItemsHead addSupport="+addSupport);				if (isPlanter						| (addSupport > -1								&& addSupport < 3)) {					headTopLoadMatrix();					Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, float.class, int.class }, HeadTop, new Object[]{ this, entityCaps, scale, addSupport });					//HeadTop.loadMatrix().renderItemsHead(this, entityCaps);				} else {					headMountLoadMatrix();					Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, scale, addSupport });					//HeadMount.loadMatrix().renderItemsHead(this, entityCaps);				}			}		}	}	public void headMountLoadMatrix() {		HeadMount.loadMatrix();	}	public void headTopLoadMatrix() {		HeadTop.loadMatrix();	}	public void renderItemsArmorHead(IModelCaps entityCaps) {		// アーマー頭部装飾品の表示		//Modchu_Debug.mDebug("renderItemsArmorHead");		Object itemstack = Modchu_EntityCapsHelper.getCapsValue(entityCaps, caps_currentArmor, new Object[]{ 3 });		if (itemstack != null) {			//Modchu_Debug.mDebug("renderItemsArmorHead 1");			int addSupport = addSupportChecks(entityCaps, itemstack, 1);			headMountRenderItems(entityCaps, itemstack, addSupport);		}	}	public void headMountRenderItems(IModelCaps entityCaps, Object itemstack, int addSupport) {		Object pEntity = Modchu_EntityCapsHelper.getCapsValue(entityCaps, entityCaps.caps_Entity);		if (Modchu_AS.getBoolean(Modchu_AS.isCamouflage, itemstack)				| Modchu_AS.getBoolean(Modchu_AS.isPlanter, itemstack)				| addSupport > -1) {			//Modchu_Debug.mDebug("headMountRenderItems 1");			Object inventory = entityCaps.getCapsValue(caps_Inventory);			float scale = 1.0F;			if (inventory != null) {				int slot = Modchu_Reflect.loadClass("EntityPlayer").isInstance(pEntity) ? 10 : 16;				Object itemstack1 = Modchu_AS.get(Modchu_AS.inventoryPlayerGetStackInSlot, inventory, slot);				if (itemstack1 != null) {					Object item2 = Modchu_AS.get(Modchu_AS.itemStackGetItem, itemstack1);					Object dyePowder = Modchu_AS.get(Modchu_AS.getItem, "dye");					if (item2 == dyePowder) {						scale = 1.0F + (0.2F * Modchu_AS.getFloat(Modchu_AS.itemStackGetItemDamage, itemstack1));					}				}			}			GL11.glPushMatrix();			headMountLoadMatrix();			Modchu_Reflect.invokeMethod(ModelRenderer.class, "renderItemsHead", new Class[]{ Object.class, Modchu_IEntityCapsBase.class, Modchu_Reflect.loadClass("ItemStack"), float.class, int.class }, HeadMount, new Object[]{ this, entityCaps, itemstack, scale, addSupport });			GL11.glPopMatrix();			//Modchu_Debug.mDebug("headMountRenderItems end");		}	}	public int addSupportChecks(IModelCaps entityCaps, Object itemstack) {		return addSupportChecks(entityCaps, itemstack, 0);	}	/**	 * PlayerFormLittleMaidで追加対応したブロック・アイテムかチェック	 * DecoBlock = 0, DecoBlockBase = 1, FavBlock = 2, Item.skull = 3,	 * BlockPumpkin = 4	 */	public int addSupportChecks(IModelCaps entityCaps, Object itemstack, int type) {		if (itemstack != null); else return -1;		Object block = Modchu_AS.get(Modchu_AS.getBlockItemStack, itemstack);//		if (ModchuModel_Main.isDecoBlock) {//			if (Modchu_Reflect.loadClass("decoBlock").isInstance(block)) return 0;//			if (Modchu_Reflect.loadClass("decoBlockBase").isInstance(block)) return 1;//		}//		if (ModchuModel_Main.isFavBlock//				&& Modchu_Reflect.loadClass("favBlock").isInstance(block)) {//			return 2;//		}		//type == 0 HeadMount, type == 1 Armor//		if (type == 0//				&& entityCaps != null//				&& entityCaps.getCapsValue(caps_EntityType).equals(entityType_PFLM)) return -1;		if (Modchu_AS.getBoolean(Modchu_AS.isSkull, itemstack)) return 3;		if (Modchu_AS.getBoolean(Modchu_AS.isPumpkin, itemstack)) return 4;		return -1;	}	public ModelRenderer getArms(int i) {		return Arms[i];	}	public ModelRenderer getHeadMount() {		return HeadMount;	}	/**	 * PlayerFormLittleMaid専用Player用処理	 * setRotationAngles 呼び出し後に通常視点時なら呼ばれる。	 * 通常視点時の手の描画位置、角度調整を入れる。	 */	public void setRotationAnglesfirstPerson(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	/**	 * カラー切替時に実行されるコード	 */	public void changeColor(IModelCaps entityCaps) {	}	/**	 * ボーンパーツ処理	 */	public void boneProcessing(float f, float f1, float f2, float f3, float f4, float f5, IModelCaps entityCaps) {	}	@Override	public float getyOffset(IModelCaps pEntityCaps) {		return 1.62F;	}	public float getRidingHeight(IModelCaps entityCaps) {		return getHeight(entityCaps);	}	public float getRidingWidth(IModelCaps entityCaps) {		return getWidth(entityCaps);	}	public float getRidingYOffset(IModelCaps entityCaps) {		return getyOffset(entityCaps);	}	/**	 * 他Mobを頭に乗せた時の他Mob基準位置調整	 */	@Override	public float getMountedYOffset(IModelCaps entityCaps) {		return 0.75F;	}	/**	 * 座っているポーズ「乗り物に乗っていない」時の位置調整	 */	public double getSittingYOffset(IModelCaps entityCaps) {		return -0.35D;	}	/**	 * isModelSize=true時に乗り物に乗っている状態でのカメラ位置調整	 */	public float ridingViewCorrection(IModelCaps entityCaps) {		return 0.0F;	}	/**	 * デフォルトモデルスケール	 */	public float getModelScale(IModelCaps entityCaps) {		return 0.9375F;	}	private int getMaidColor(IModelCaps entityCaps) {		Object entityliving = Modchu_EntityCapsHelper.getCapsValue(entityCaps, entityCaps.caps_Entity);		if (entityliving != null) {			Object o = Modchu_Reflect.getFieldObject("LMM_EntityLittleMaid", "maidColor", entityliving);			if (o != null)				return (Integer) o;		}		return 0;	}	private void setModchuRemodelingModel(boolean b) {		ModchuModel_ConfigData.modchuRemodelingModel = b;	}	public float Physical_Hammer(IModelCaps entityCaps) {		return Modchu_CastHelper.Float(Modchu_Reflect.getFieldObject("modchu.pflm.PFLM_ConfigData", "Physical_Hammer"));	}	public ModelRenderer getBipedHead(IModelCaps entityCaps) {		return bipedHead;	}	public Object getRightArm(IModelCaps entityCaps) {		return getBipedRightArm(entityCaps);	}	@Override	public Object getCapsValue(int pIndex, Object... pArg) {		if (pIndex == caps_armorType) {			return getArmorType();		}		return super.getCapsValue(pIndex, pArg);	}	private int getArmorType() {		float[] f = getArmorModelsSize();		//Modchu_Debug.mlDebug("getArmorType() modelSize="+modelSize+" "+this);		//Modchu_Debug.mlDebug("getArmorType() modelSize="+modelSize+" f[0]="+f[0]+" f[1]="+f[1]);		return modelSize == f[0] ? 1 : modelSize == f[1] ? 2 : 0;	}	public ModelRenderer getDominantArm(IModelCaps entityCaps) {//		if (Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedRightArm;		return bipedLeftArm;	}	public ModelRenderer getBipedRightArm(IModelCaps entityCaps) {		return bipedRightArm;	}	public ModelRenderer getBipedLeftArm(IModelCaps entityCaps) {		return bipedLeftArm;	}	public ModelRenderer getBipedRightLeg(IModelCaps entityCaps) {		return bipedRightLeg;	}	public ModelRenderer getBipedLeftLeg(IModelCaps entityCaps) {		return bipedLeftLeg;	}//	public ModelRenderer getNotDominantArm(IModelCaps entityCaps) {//		if (Modchu_EntityCapsHelper.getCapsValueInt(this, entityCaps, caps_dominantArm, getCapsValue(caps_armorType)) == 0) return bipedLeftArm;//		return bipedRightArm;//	}	@Override	public void renderFirstPersonHand(IModelCaps entityCaps/*, int i*/) {		if (entityCaps != null) {			ModelRenderer ModelRenderer = /*i == 0 ? */getDominantArm(entityCaps)/* : getNotDominantArm(entityCaps)*/;			if (ModelRenderer != null) ModelRenderer.render(0.0625F);		}	}	public boolean armSwingFlag(IModelCaps entityCaps) {		return (onGrounds[0] > -9990F				| onGrounds[1] > -9990F)				&& !Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_aimedBow)//				&& !Modchu_EntityCapsHelper.getCapsValueBoolean(this, entityCaps, caps_oldwalking)//				&& (!isGulliver()//						| (isGulliver()//								&& !Modchu_EntityCapsHelper.getCapsValueBoolean(entityCaps, caps_freeVariable, "isGliding")))								;	}	// Minecraft 1.8以上用 Armorに対してMainModelを引数として渡して呼ばれる。同期処理等に	public void setModelAttributes(Object model) {	}	// 以下、LMM_EntityCaps側にあってほしいもの	/**	 * LMM専用処理	 * setLivingAnimations 呼び出し後に呼ばれる。	 */	public void setLivingAnimationsAfter(IModelCaps entityCaps, float f, float f1, float f2) {		if (bipedHead != null				&& entityCaps != null) {			float angle = Modchu_EntityCapsHelper.getCapsValueFloat(this, entityCaps, caps_interestedAngle, f2);			bipedHead.rotateAngleZ = angle;		}	}	public void setArmorBipedBodyShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedBody, b);	}	public void setArmorBipedRightArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightArm, b);	}	public void setArmorBipedLeftArmShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftArm, b);	}	public void setArmorBipedRightLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedRightLeg, b);	}	public void setArmorBipedLeftLegShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedLeftLeg, b);	}	public void setArmorSkirtShowModel(IModelCaps entityCaps, boolean b) {	}	public void setArmorBipedHeadShowModel(IModelCaps entityCaps, boolean b) {		setCapsValue(entityCaps, caps_visible, bipedHead, b);		setCapsValue(entityCaps, caps_visible, bipedHeadwear, b);	}}