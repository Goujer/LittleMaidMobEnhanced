package modchu.model;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import littleMaidMobX.LittleMaidMobX;import littleMaidMobX.model.ModelMultiBase;import littleMaidMobX.registry.ModelManager;import littleMaidMobX.textures.TextureBox;import modchu.lib.Modchu_Debug;import modchu.lib.Modchu_Main;import modchu.lib.Modchu_Reflect;import modchu.lib.Modchu_TextureManagerBase;import modchu.lib.characteristic.Modchu_CastHelper;import modchu.lib.characteristic.Modchu_IEntityCapsBase;import modchu.lib.characteristic.Modchu_ModelBase;import modchu.lib.characteristic.Modchu_TextureBoxBase;import modchu.lib.characteristic.Modchu_Version;import modchu.lib.lmm.characteristic.ModchuLmmXModel;import modchu.lib.lmm.characteristic.Modchu_LmmXTextureBox;import modchu.model.multimodel.base.MultiModel;import modchu.model.multimodel.base.MultiModelBaseBiped;public class ModchuModel_Main {	public static final String version = "22f";	public static final String modName = "ModchuModel";	public static final String versionString = ""+ Modchu_Version.version + "-" + version;	public static String newVersion = "";	public final static boolean isLMM = true;	public final static boolean isLMMX = true;	public static String modelClassName = "MultiModel";	private static File mainCfgfile;	public static File cfgfile;	private static int initModsLoadedCount = 0;	public static final String addLmmModelString = ";lmmModel";	private static final int maxInitModsLoadedCount = 10;	public String getName() {		return modName;	}	public String getVersion() {		return versionString;	}	public static void load() {//		mainCfgfile = new File(Modchu_Main.cfgdir, "ModchuModel.cfg");//		cfgfile = new File(Modchu_Main.cfgdir, "ModchuModel_ShowModel.cfg");//		loadcfg();				Modchu_TextureManagerBase.instance.init();		Modchu_TextureManagerBase.instance.loadTextures();		initTextureManager();		lmmTextureManagerInit();	}	private static void initTextureManager() {		if (!LittleMaidMobX.isServer) {			//ModchuModel_StabilizerManagerReplacePoint.loadStabilizer();			// テクスチャインデックスの構築			Modchu_TextureManagerBase.instance.initTextureList(true);		} else {//			Modchu_TextureManagerBase.instance.loadTextureServer();		}	}	private static void lmmTextureManagerInit() {		ModelManager instance = ModelManager.instance;		Map<String, ModelMultiBase[]> models = instance.modelMap;		List<TextureBox> textures = ModelManager.getTextureList();		for (Entry<String, MultiModelBaseBiped[]> en : Modchu_TextureManagerBase.instance.modelMap.entrySet()) {			MultiModelBaseBiped[] o = en.getValue();			if (o[0].getClass() == MultiModel.class) continue;			ModelMultiBase[] mlm = new ModelMultiBase[] {				new ModchuLmmXModel(o[0]),				new ModchuLmmXModel(o[1]),				new ModchuLmmXModel(o[2])			};			System.out.println("wrap "+en.getKey()+" - "+o[0].getClass()+" in "+ModchuLmmXModel.class);			String a = ((ModchuLmmXModel)mlm[0]).master.getClass().getName();			String name = Modchu_Main.lastIndexProcessing(a, "_");			System.out.println("new name "+name);			models.put(name, mlm);		}		String defaultModelName = ModelManager.defaultModelName;		ModelMultiBase[] ldm = models.get(defaultModelName);		if (ldm == null && !models.isEmpty()) {			ldm = (ModelMultiBase[]) models.values().toArray()[0];		}		List texturesFileName = new ArrayList();		for (TextureBox ltb1 : textures) {			String fileName = ltb1.fileName;			if (fileName != null					&& !fileName.isEmpty()) texturesFileName.add(fileName);		}		for (Modchu_TextureBoxBase mtb : Modchu_TextureManagerBase.instance.textures) {			TextureBox ltb = new Modchu_LmmXTextureBox(mtb);			if (!texturesFileName.contains(mtb.fileName)) {				textures.add(ltb);			}		}		for (TextureBox ltb : textures) {			String modelName = ltb.modelName;			if (modelName.isEmpty()) {				ltb.setModels(defaultModelName, null, ldm);			} else {				ModelMultiBase[] model1 = models.get(modelName);				ltb.setModels(modelName, model1, ldm);			}				}		for (Entry<String, ModelMultiBase[]> le : models.entrySet()) {			String ls =  le.getValue()[0].getUsingTexture();			if (ls != null) {				if (instance.getTextureBox(ls + "_" + le.getKey()) == null) {					TextureBox lbox = null;					for (TextureBox ltb : textures) {						String packegeName = ltb.packegeName;						if (packegeName != null								&& packegeName.equals(ls)) {							lbox = ltb;							break;						}					}					if (lbox != null) {						lbox = lbox.duplicate();						lbox.setModels(le.getKey(), null, le.getValue());						textures.add(lbox);					}				}			}		}		for (int li = textures.size() - 1; li >= 0; li--) {			TextureBox o = textures.get(li);			if (o.models == null) {				textures.remove(li);			}		}		instance.initTextureList(true);	}//	//	public static void loadcfg() {//		// cfg読み込み//		if (Modchu_Main.cfgdir.exists()) {//			if (!mainCfgfile.exists()) {//				// cfgファイルが無い = 新規作成//				String s[] = {//						"AlphaBlend=true", "skirtFloats=true", "skirtFloatsVolume=1.0D", "breastFloats=true", "breastFloatsVolume=1.0D",//						"transparency=1.0F", "modchuRemodelingModel=true", "useInvisibilityBody=true", "useInvisibilityArmor=false", "useInvisibilityItem=false",//						"versionCheck=true",  "debugCustomModelMessage=false", "modelForLittleMaidMob=true"//				};//				Modchu_Config.writerConfig(mainCfgfile, s);//			} else {//				// cfgファイルがある//				ModchuModel_ConfigData.AlphaBlend = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "AlphaBlend", ModchuModel_ConfigData.AlphaBlend));//				ModchuModel_ConfigData.skirtFloats = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "skirtFloats", ModchuModel_ConfigData.skirtFloats));//				ModchuModel_ConfigData.skirtFloatsVolume = Modchu_CastHelper.Double(Modchu_Config.loadConfig(mainCfgfile, "skirtFloatsVolume", ModchuModel_ConfigData.skirtFloatsVolume));//				ModchuModel_ConfigData.breastFloats = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "breastFloats", ModchuModel_ConfigData.breastFloats));//				ModchuModel_ConfigData.breastFloatsVolume = Modchu_CastHelper.Double(Modchu_Config.loadConfig(mainCfgfile, "breastFloatsVolume", ModchuModel_ConfigData.breastFloatsVolume));//				ModchuModel_ConfigData.transparency = Modchu_CastHelper.Float(Modchu_Config.loadConfig(mainCfgfile, "transparency", ModchuModel_ConfigData.transparency));//				ModchuModel_ConfigData.modchuRemodelingModel = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "modchuRemodelingModel", ModchuModel_ConfigData.modchuRemodelingModel));//				ModchuModel_ConfigData.useInvisibilityBody = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityBody", ModchuModel_ConfigData.useInvisibilityBody));//				ModchuModel_ConfigData.useInvisibilityArmor = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityArmor", ModchuModel_ConfigData.useInvisibilityArmor));//				ModchuModel_ConfigData.useInvisibilityItem = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "useInvisibilityItem", ModchuModel_ConfigData.useInvisibilityItem));////				ModchuModel_ConfigData.versionCheck = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "versionCheck", ModchuModel_ConfigData.versionCheck));////				ModchuModel_ConfigData.modelForLittleMaidMob = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "modelForLittleMaidMob", ModchuModel_ConfigData.modelForLittleMaidMob));////				Modchu_Debug.debugCustomModelMessage = Modchu_CastHelper.Boolean(Modchu_Config.loadConfig(mainCfgfile, "debugCustomModelMessage", Modchu_Debug.debugCustomModelMessage));//				String k[] = {//						"AlphaBlend", "skirtFloats", "skirtFloatsVolume", "breastFloats", "breastFloatsVolume",//						"transparency", "modchuRemodelingModel", "useInvisibilityBody", "useInvisibilityArmor", "useInvisibilityItem",//						"versionCheck", "debugCustomModelMessage", "modelForLittleMaidMob"//				};//				String k1[] = {//						""+ModchuModel_ConfigData.AlphaBlend, ""+ModchuModel_ConfigData.skirtFloats, ""+ModchuModel_ConfigData.skirtFloatsVolume, ""+ModchuModel_ConfigData.breastFloats, ""+ModchuModel_ConfigData.breastFloatsVolume,//						""+ModchuModel_ConfigData.transparency, ""+ModchuModel_ConfigData.modchuRemodelingModel, ""+ModchuModel_ConfigData.useInvisibilityBody, ""+ModchuModel_ConfigData.useInvisibilityArmor, ""+ModchuModel_ConfigData.useInvisibilityItem,//						""+ModchuModel_ConfigData.versionCheck, ""+Modchu_Debug.debugCustomModelMessage, ""+ModchuModel_ConfigData.modelForLittleMaidMob//				};//				Modchu_Config.writerSupplementConfig(mainCfgfile, k, k1);//			}//			if (cfgfile.exists()) Modchu_Config.loadConfig(showModelList, cfgfile);//		}//		cfgMaxMinCheck();//	}////	public static void cfgMaxMinCheck() {//		if (ModchuModel_ConfigData.skirtFloatsVolume < 0.0D) ModchuModel_ConfigData.skirtFloatsVolume = 0.0D;//		if (ModchuModel_ConfigData.skirtFloatsVolume > 2.0D) ModchuModel_ConfigData.skirtFloatsVolume = 2.0D;//		if (ModchuModel_ConfigData.breastFloatsVolume < 0.0D) ModchuModel_ConfigData.breastFloatsVolume = 0.0D;//		if (ModchuModel_ConfigData.breastFloatsVolume > 2.0D) ModchuModel_ConfigData.breastFloatsVolume = 2.0D;//		if (ModchuModel_ConfigData.transparency < 0.0F) ModchuModel_ConfigData.transparency = 0.0F;//		if (ModchuModel_ConfigData.transparency > 1.0F) ModchuModel_ConfigData.transparency = 1.0F;//	}/*	public static boolean onTickInGame(float f, Object minecraft, byte by, Object... tickData) {		return false;	}*/	public static String getPackege(int i, int j) {		return getTextureBoxTextureName(getTextureManagerTextures(j));	}	public static String getModelSpecificationArmorPackege(String s) {		s = Modchu_Main.lastIndexProcessing(s, "_");		Object ltb;		for (int i = 0 ; i < getTextureManagerTexturesSize() ; ++i) {			ltb = getTextureManagerTextures(i);			if (getTextureBoxHasArmor(ltb)) {				String s2 = Modchu_Main.lastIndexProcessing(getTextureBoxTextureName(ltb), "_");				if (s2 != null						&& !s2.isEmpty()						&& s2.equalsIgnoreCase(s)) {					//Modchu_Debug.mDebug("ltb.packegeName="+getTextureBoxFileName(ltb));					return getTextureBoxFileName(ltb);				}			}		}		return null;	}	public static Object getTextureBox(String s) {		s = textureNameCheck(s);		return Modchu_TextureManagerBase.instance.getTextureBox(s);	}	public static Object getTextureBox(int i) {		return getTextureManagerTextures(i);	}	public static Object textureManagerGetTexture(String s, int i) {		Object ltb = getTextureBox(s);		//Modchu_Debug.mDebug("textureManagerGetTextureName s="+textureNameCheck(s)+" i="+i);		if (ltb != null) return getTextureBoxTextureName(ltb, i);		Modchu_Debug.Debug1("textureManagerGetTextureName null !! default change. s="+textureNameCheck(s)+" i="+i);		s = textureNameCheck(null);		ltb = getTextureBox(s);		if (ltb != null) return getTextureBoxTextureName(ltb, i);		return null;	}	public static String textureNameCheck(String s) {		if (s != null				&& s.lastIndexOf(ModchuModel_Main.addLmmModelString) > -1) return s;		String s1 = Modchu_TextureManagerBase.defaultModelName;		if (s == null				| (s !=null				&& s.isEmpty())) {			if (s1 != null) {				s = "default_"+s1;				//Modchu_Debug.lDebug("Modchu_Main textureNameCheck default setting.");			}			else Modchu_Debug.lDebug("Modchu_Main textureNameCheck MMM_TextureManager defaultModelName == null !!");		} else {			if (s.indexOf("_") < 0) {				if (s1 != null) s = s+"_"+s1;			}		}		return s;	}	public static Object textureManagerGetArmorTexture(String s, int i, Object itemstack) {		return textureManagerGetArmorTexture(s, i, itemstack, false);	}	public static Object textureManagerGetArmorTexture(String s, int i, Object itemstack, boolean debug) {		if (debug) Modchu_Debug.Debug("textureManagerGetArmorTextureName s="+s+" i="+i+" itemstack != null ? "+(itemstack != null));		s = textureNameCheck(s);		Object ltb = getTextureBox(s);		if (debug) Modchu_Debug.Debug("textureManagerGetArmorTextureName s="+s+" ltb="+ltb);		if (ltb != null) {			if (debug) Modchu_Debug.Debug("textureManagerGetArmorTextureName return="+(((Modchu_TextureBoxBase) ltb).getArmorTextureName(i, itemstack)));			return ((Modchu_TextureBoxBase) ltb).getArmorTextureName(i, itemstack);		}		if (debug) Modchu_Debug.Debug("textureManagerGetArmorTextureName return null !! s="+s+" i="+i+" itemstack="+itemstack);		return null;	}	public static String textureManagerGetNextPackege(String s, int i) {		return textureManagerGetPackege(s, i, 0);	}	public static String textureManagerGetPrevPackege(String s, int i) {		return textureManagerGetPackege(s, i, 1);	}	public static String textureManagerGetPackege(String s, int i, int i1) {		Object ltb = getTextureBox(s);		if (ltb != null) {			ltb = i1 == 0 ? Modchu_Reflect.invokeMethod(Modchu_TextureManagerBase.instance.getClass(), "getNextPackege", new Class[]{ ltb.getClass(), int.class }, Modchu_TextureManagerBase.instance, new Object[]{ ltb, i }) :				Modchu_Reflect.invokeMethod(Modchu_TextureManagerBase.instance.getClass(), "getPrevPackege", new Class[]{ ltb.getClass(), int.class }, Modchu_TextureManagerBase.instance, new Object[]{ ltb, i });			return getTextureBoxTextureName(ltb);		}		Modchu_Debug.mDebug("textureManagerGetPackege return null !! s="+s+" i="+i);		return null;	}	public static String textureManagerGetNextArmorPackege(String s) {		return textureManagerGetArmorPackege(s, 0);	}	public static String textureManagerGetPrevArmorPackege(String s) {		return textureManagerGetArmorPackege(s, 1);	}	public static String textureManagerGetArmorPackege(String s, int i) {		//Modchu_Debug.mDebug("textureManagerGetArmorPackege s="+s+" i="+i);		String s1 = Modchu_TextureManagerBase.defaultModelName;		int index = -1;		String s2 = s;		int i2 = s != null && !s.isEmpty() ? s.lastIndexOf(s1) : -1;		if (i2 > -1) {			s2 = s.substring(0, i2 - 1);		}		//Modchu_Debug.mDebug("textureManagerGetArmorPackege s2="+s2);		index = textureManagerGetArmorPackegeIndex(s2);		if (index == -1) {			index = textureManagerGetArmorPackegeIndex("default");			if (index == -1) {				Modchu_Debug.mDebug("textureManagerGetArmorPackege return index == -1 !!");				return null;			}		}		boolean flag = false;		List<Object> textures = getTextureManagerTextures();		Object ltb = getTextureBox(s);		for (int i1 = 0; i1 < textures.size(); i1++) {			index = i == 0 ? index + 1 : index - 1;			if (index >= textures.size()) index = 0;			if (index < 0) index = textures.size() - 1;			ltb = textures.get(index);			//ltb = i == 0 ? Modchu_Reflect.invokeMethod(MMM_TextureManager, "getNextArmorPackege", new Class[]{MMM_TextureBox}, textureManagerInstance, new Object[]{ltb}) :			//Modchu_Reflect.invokeMethod(MMM_TextureManager, "getPrevArmorPackege", new Class[]{MMM_TextureBox}, textureManagerInstance, new Object[]{ltb});			//Modchu_Debug.mDebug("textureManagerGetArmorPackege index for index="+index+" s="+(String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb));			if (getTextureBoxHasArmor(ltb)) {				s = (String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb);				if (!s.isEmpty()						&& !s.equals(s2)) {					//Modchu_Debug.mDebug("textureManagerGetArmorPackege flag ok.textures.size()="+textures.size());					//Modchu_Debug.mDebug("textureManagerGetArmorPackege flag ok.s="+s);					flag = true;					break;				}			}		}		if (!flag) Modchu_Debug.mDebug("textureManagerGetArmorPackege !flag !!");		i2 = s.lastIndexOf(s1);		if (i2 > -1) s = s.substring(0, i2);		//Modchu_Debug.mDebug("textureManagerGetArmorPackege return s="+s);		return s;	}	private static int textureManagerGetArmorPackegeIndex(String s) {		int index = -1;		List<Object> textures = getTextureManagerTextures();		Object ltb = getTextureBox(s);		for (int i1 = 0; i1 < textures.size(); i1++) {			ltb = textures.get(i1);			//Modchu_Debug.mDebug("textureManagerGetArmorPackegeIndex get "+((String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb)));			if(((String) Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb)).equals(s)) {				index = i1;				break;			}		}		return index;	}	public static Object[] getTextureBoxModels(Object ltb) {		return ltb != null ? (Object[])Modchu_Reflect.getFieldObject(ltb.getClass(), "models", ltb) : null;	}	public static boolean getTextureBoxHasArmor(Object ltb) {		return ltb != null ? (Boolean)Modchu_Reflect.invokeMethod(ltb.getClass(), "hasArmor", ltb) : false;	}	public static boolean getTextureBoxHasColor(Object ltb, int i) {		return ltb != null ? (Boolean)Modchu_Reflect.invokeMethod(ltb.getClass(), "hasColor", new Class[]{ int.class }, ltb, new Object[]{ i }) : false;	}	public static String getTextureBoxTextureName(Object ltb) {		return ltb != null ? Modchu_CastHelper.String(Modchu_Reflect.getFieldObject(ltb.getClass(), "textureName", ltb)) : null;	}	public static Object getTextureBoxTextureName(Object ltb, int i) {		return ltb != null ? Modchu_Reflect.invokeMethod(ltb.getClass(), "getTextureName", new Class[]{ int.class }, ltb, new Object[]{ i }) : null;	}	public static String getTextureBoxFileName(Object ltb) {		return ltb != null ? (String)Modchu_Reflect.getFieldObject(ltb.getClass(), "fileName", ltb) : null;	}	public static String getTextureBoxPackegeName(Object ltb) {		return ltb != null ? (String)Modchu_Reflect.getFieldObject(ltb.getClass(), "packegeName", ltb) : null;	}	public static List<Object> getTextureManagerTextures() {		return (List<Object>) Modchu_Reflect.getFieldObject(Modchu_TextureManagerBase.instance.getClass(), "textures", Modchu_TextureManagerBase.instance);	}	public static int getTextureManagerTexturesSize() {		return getTextureManagerTextures().size();	}	public static Object getTextureManagerTextures(int i) {		return getTextureManagerTextures().get(i);	}	public static String getModelClassName(String s) {		//Modchu_Debug.mDebug("getModelClassName s="+s);		s = Modchu_Main.lastIndexProcessing(s, "_");		for (Entry<String, MultiModelBaseBiped[]> en : Modchu_TextureManagerBase.instance.modelMap.entrySet()) {			String key = en.getKey();			//Modchu_Debug.mDebug1("getModelClassName key="+key);			if (key.equals(s)) {				MultiModelBaseBiped[] o = en.getValue();				return o[0].getClass().getName();			}		}		return s;	}	public static float[] getArmorModelsSize(Object o) {		Object o1 = Modchu_Reflect.invokeMethod(o.getClass(), "getArmorModelsSize", o, -1);		return o1 != null ? Modchu_CastHelper.FloatArray(o1) : new float[]{ 0.1F, 0.5F };	}	public static int getCapsInt(String s) {		int i = 0;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IEntityCapsBase.class, s);		if (i > 0) return i;		i = (Integer) Modchu_Reflect.getFieldObject(Modchu_IEntityCapsBase.class, s);		return i;	}	public static Object getModelMaster(Object model) {		if (model != null				&& model instanceof Modchu_ModelBase) {			if (((Modchu_ModelBase) model).master instanceof MultiModelBaseBiped) return ((MultiModelBaseBiped) ((Modchu_ModelBase) model).master);		}		return model;	}}